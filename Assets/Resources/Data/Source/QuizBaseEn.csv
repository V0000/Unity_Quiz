Text,Answers0,Answers1,Answers2,Answers3,Explanation,Difficulty
What is the purpose of the console in Unity?,"Displaying errors, warnings, and logs.",Viewing and editing text files.,Loading packages and assets.,Executing command-line instructions.,The Console in Unity is a tool for displaying messages and outputting information about the application's operation during its execution. It plays a significant role in the process of developing and debugging games and applications.,1
What are prefabs in Unity3D?,This is objects that can be used to create copies in the scene.,These are ready-made 3D models for use in the scene.,These are scripts for controlling the gameplay process.,These are components for working with object physics.,"Prefabs in Unity3D are templates of objects that can be created, customized, and used multiple times in the scene. They enable the creation of identical objects with the same set of components, properties, and settings.

When you create a prefab, it becomes a kind of ""prototype"" of an object, and its instances in the scene will appear just like the original prefab, with the ability to make individual changes to each instance.",2
What data does a mesh store?,The mesh stores data about attributes that define the visual appearance of an object.,The mesh stores information about the coordinates of the object in the game space.,The mesh stores data about the attributes that determine the object's visual appearance.,The mesh stores data about user input and controls to handle player actions in the game engine.,"The mesh defines the shape and appearance of an object, including its vertices, faces, texture coordinates, and other attributes.

Vertices: The mesh contains a list of vertices that define the positions of points in 3D space.

Faces: The mesh defines faces that connect vertices and determine the object's shape. Faces can be triangles, quads, or polygons of more complex shapes.

Normals: Normals indicate the surface direction at each vertex and are used for lighting calculations and light reflection from the object.

Texture Coordinates: The mesh may contain texture coordinates that link vertices to corresponding points on a texture.",3
What is a method?,A set of instructions.,It is an object that contains data and behavior of a class.,It is an object property that stores data for the class.,Part of the interface.,"A method is a block of code, encapsulated inside a class in object-oriented programming, that performs specific operations or actions. Methods are functions that can take parameters, perform computations, interact with class data, and return results.

They are fundamental building blocks of class behavior and enable performing specific actions on objects of that class. Methods define the behavior of objects and provide the ability to use them in the program's code by calling the methods and passing necessary arguments.",3
What is a canvas?,This is a component used for displaying the user interface.,It is a library for working with graphics and images in Unity.,Canvas in Unity is used for drawing textures and sprites on the screen.,It is the control panel for project settings and configurations in Unity.,"Canvas in Unity is a component used for displaying the user interface (UI) on the screen. It represents a flat surface where various UI elements such as text, images, buttons, and other interactive components can be placed.

Canvas enables the creation of a flexible and adaptive user interface that automatically scales and adjusts to different screen resolutions and devices.",4
What is OOP?,A paradigm that is focused on describing software systems in terms of objects and their interactions.,A programming methodology whose main goal is to make the code as linear as possible.,Technology that allows interacting with digital systems using natural languages.,A way of organizing code where all operations are performed sequentially without using abstractions.,"OOP, or Object-Oriented Programming, is a programming methodology that focuses on organizing code into objects, representing real-world entities or abstractions. In object-oriented programming, data and functions related to that data are encapsulated together into unified entities called objects.",5
What is a class?,User-defined data type.,It is an object that contains data and behavior of the program.,It is a data type used for storing numerical values.,It is a function that performs specific actions in the program.,"A class is a template or description that defines the state (fields) and behavior (methods) of objects in OOP. It is a fundamental concept of OOP and serves to create objects - instances of the class.

A class defines common characteristics for a group of objects that will be created based on it. It encapsulates data (fields) and operations (methods) that are related to a specific entity and defines the behavior and properties that objects of this class possess.",5
What is the purpose of an animator?,"Allows creating and controlling various animations, transitions, and parameters.",Designed for creating and editing 3D models.,Provides tools for working with physical effects and simulations.,Allows creating animations in Unity.,"Animator in Unity is a component that allows creating and controlling object animations in the scene.
Some of the main features include:
- Creating animations using the Animator Controller's graphical editor.
- Controlling animation parameters for smooth transitions between animation states.
- Applying animations to different object states (e.g., idle, movement, attack, etc.).
- Synchronizing animations with other components and events in the game.
- Creating animations using scripts to provide dynamic and responsive animations to player actions.",6
Which Unity3D component is used for playing sound effects?,Audio Source,Camera,Light,Particle System,"To play sound effects in Unity3D, the ""AudioSource"" component is used. The AudioSource component allows you to control the playback of sound files, such as audio effects, environmental sounds, music, etc.

You can add the AudioSource component to any game object that will play a sound effect and configure its properties, such as the audio file to play, volume, spatial position, etc. Additionally, AudioSource has methods for controlling playback, such as Play() to start playing, Pause() to pause, Stop() to stop, etc.",7
Which Unity3D component is used for displaying text on the scene?,Text Mesh Pro,Light,Collider,Particle System,"Text Mesh Pro (TMP) is a package and component for working with text in Unity, providing a rich set of features and enhancements compared to the standard Text component. It is developed and maintained by Unity Technologies.",7
What is a superclass?,"A class that serves as a parent, from which others inherit.",A class that is derived from multiple subclasses simultaneously.,A class that cannot have its own code and can only inherit code from other classes.,A class that is used only in static contexts of the program.,"A superclass (also known as a parent class or base class) in object-oriented programming is a class from which another class, known as a subclass or child class, is derived.

With inheritance, the subclass inherits the attributes and methods of the superclass and can add its own attributes and methods. In this sense, the superclass provides a common set of functionality that can be reused in multiple subclasses, promoting code reusability and supporting the principles of abstraction and encapsulation.",8
What is MonoBehaviour?,It is a base class in Unity that allows creating and attaching components to game objects.,It is a component that is responsible for creating physical objects in the game.,It is a development environment for creating the user interface in Unity.,It is a base class that provides access to basic mathematical operations in Unity.,"MonoBehaviour is a base class in Unity that allows creating components that interact with objects in the scene. The MonoBehaviour class provides the ability to add behavior to game objects, such as characters, items, cameras, etc.

When creating scripts in Unity, they must be inherited from MonoBehaviour. This allows using various MonoBehaviour methods, such as Start(), Update(), FixedUpdate(), and others, which are automatically called by the Unity engine at specific moments in the object's lifecycle.",9
Which Unity3D component allows objects to interact with other objects in the scene through collisions and triggers?,Collider,Mesh Renderer,Camera,Light,Collider is a basic component that allows defining the boundaries and shape of an object for collision detection with other objects. The Collider does not process collision logic; it simply defines areas that can interact with other colliders.,9
What is used in the hierarchy to organize game objects into groups?,Empty objects,Canvas, Event systems,Mesh renderers,"Occlusion map is a texture map used to determine the visibility of objects in the scene relative to a light source or camera.

The main purpose of an occlusion map is to determine which pixels of objects are in shadow or hidden by other objects in the scene. This allows excluding unnecessary pixels from the lighting and rendering process, which increases performance and enables the creation of more realistic and detailed scenes.",10
What is a constructor?,"A special method with the same name as the class, which is executed during the class initialization.",It is a special method that is called in a class to finalize the program's operation.,It is a method that is called in a class during compilation.,A special method used for passing data between different classes.,"Constructor is a special method in a class that is automatically called when an object of that class is created.

The main task of a constructor is to ensure proper initialization of the object before its use. It allows setting values to the class fields and performing other configurations so that the object is ready for use immediately after creation.

In the C# language, the constructor's name matches the class name. The constructor can be overloaded, which means that the class can have multiple constructors with different parameters.",11
Which method in MonoBehaviour is called when the object is activated in the scene?,OnEnable,OnStart,OnActivate,OnAttach,The method OnEnable() is a method in Unity that is called every time a component becomes active in the scene. It is executed after the Awake() method when the object is activated or when the component is enabled on the object.,11
What is an object in OOP?,It is an instance of a class.,This is a class property that stores data for later use.,This is a programming principle that states that each class should have only one object.,This is a value.,"Object - is an instance of a class in OOP. The class defines the structure and behavior of objects, while an object represents a specific instance of that class with its unique state and behavior.

Class - is a template or blueprint that defines the properties (fields) and methods (functions) that objects of this class possess. It serves as an abstraction, defining common characteristics for a group of objects.

Object - is a concrete embodiment of a class with its unique property values and behavior.",12
What is exception handling?,Error handling mechanism for avoiding program termination or crashes.,The mechanism for notifying the user about issues in the program.,Mechanism for emergency program termination in case of error interception.,Mechanism for ignoring program runtime errors.,"Exception handling is a mechanism that allows handling and managing errors and exceptional situations in a program. When an exception occurs, it signals a non-standard situation or error that may impact the normal execution of the program.

Instead of allowing the program to crash when an exception occurs, exception handling allows catching and handling the error, taking appropriate actions, or continuing the program's execution considering the encountered situation.",13
Which of the following Unity3D components is used for physics and object collisions?,Rigidbody,Transform,Audio Listener, Mesh Renderer,"The Unity3D component used for working with physics and object collisions is called 'Rigidbody'. Rigidbody is added to objects to simulate physical behavior, such as gravity, collisions, and interactions with other objects in the scene.",13
"When creating resources such as meshes for Unity, what unit of measurement is recommended to use?",Meters.,Feet.,Cubits.,Inches.,The primary unit of measurement in Unity is the meter. All sizes and coordinates of objects in the scene are specified in meters.,14
What are normals used for?,Normals are used to determine the depth and density of an object in three-dimensional space.,Normals are used to determine the depth and density of an object in three-dimensional space.,"Normals are used to control the physical properties of an object, such as its mass and friction.",Normals are used to determine audio effects and sound properties of an object.,"Normals in 3D graphics are used to determine the direction of the surface at each vertex of the mesh. They are used to calculate the lighting of objects. Lighting depends on the angle between the surface normals and the direction of the light source. This allows creating realistic effects of shading and reflections on the surfaces of objects. Normals are also used for calculating shadows. As the light source moves, normals help determine which parts of the object should be in shadow and which should be in the light.

Additionally, normals can be used for collision detection and object collisions.",15
Which component is responsible for controlling animations in the scene?,Animator,Rigidbody,Collider,Audio Source,"The Unity3D component responsible for managing object animations in the scene is called the 'Animator'. It is used for creating and controlling animation states, as well as transitions between them based on specific conditions or parameters. With the Animator component, you can create complex animation controllers and control the movements and behavior of objects in the game.",15
What is the difference between an error and an exception?,"Error - a defect in the program.
Exception - an event that occurs as a result of an error.",Errors are special objects created in the program to handle exceptional situations.,"Errors occur only during program execution, while exceptions occur only during compilation.",Errors and exceptions are synonyms and are used interchangeably in programming.,"Errors are unforeseen issues in a program that lead to a crash, while exceptions are special signals of non-standard situations that can be caught and handled in the program to resolve the issue without crashing the program.",16
Which method in MonoBehaviour is called before the object is destroyed on the scene?,OnDestroy,OnDisable,OnAwake,OnDelete,The OnDestroy method in MonoBehaviour is called before the object is destroyed in the scene. This method provides an opportunity to perform additional actions or release resources associated with the object before it is removed from memory.,17
What does the IsKinematic property do on the Rigidbody component?,"It disables physical interactions on the object, allowing manual transformations only through code.",It removes the object's gravity but preserves all other forces.,It removes all physical forces from the object except for gravity.,It converts the object into physical forces that affect other objects.,"The IsKinematic property on the Rigidbody component in Unity indicates whether the object will be subject to physical interactions with other objects in the scene. When the IsKinematic value is set to true, the object will not respond to forces and collisions caused by the physical movement of other objects or gravity.

Therefore, an object with IsKinematic enabled will move and interact with the environment only through its own code or animations, not through Unity's standard physics system. This can be useful when you need to directly control the movement of an object in the scene without it being affected by physical forces.",17
Which Unity3D component is used for displaying 3D models on the scene?,Mesh Renderer,Light,Collider,Camera,"The Mesh Renderer component is responsible for rendering the graphical information represented as a mesh (3D model) on the screen. It works in conjunction with the Mesh Filter component, which contains the actual mesh (3D model), as well as with materials that define the object's appearance.

The Mesh Renderer component includes parameters such as materials, lighting settings, texture offset and scaling, and other parameters that allow you to control the appearance of the displayed 3D objects.",18
"What does the ""virtual"" modifier mean?","The ""virtual"" modifier indicates that the method can be overridden.","The ""virtual"" modifier indicates that the method is abstract and requires implementation in each derived class.","The ""virtual"" modifier indicates that the method can be called only from other methods within the same class.","The ""virtual"" modifier indicates that the method is accessible only within the current class and cannot be inherited.","When a method is declared with the 'virtual' modifier, it can be overridden in derived classes using the 'override' modifier. This allows derived classes to provide their own implementation of the method, replacing the implementation from the base class.",19
"Where are members with the ""public"" modifier accessible?","From anywhere in the program, including other classes and namespaces.",Only within the same project (assembly).,Inside the same class and its derived classes (subclasses).,Only within the same class where they are declared.,"Members with the 'public' modifier are accessible from anywhere in the program, including other classes and namespaces. This means that from any code, including code in other classes, objects, or even in other assemblies (projects), you can access the public members of the class.",19
What is the difference between deltaTime and fixedDeltaTime?,"deltaTime is the time between frames, while fixedDeltaTime is a fixed value from the settings.",deltaTime and fixedDeltaTime always have the same value during the execution of the game.,"deltaTime is the time between frames, while fixedDeltaTime is the number of frames per second.","deltaTime is a static property of the Time class in Unity, while fixedDeltaTime is not.","deltaTime represents the time (in seconds) between the current and previous frame. deltaTime can vary depending on the system's performance, so the movement of objects may be different on different devices.

fixedDeltaTime represents a fixed value of time between frames, which is set in the project settings. fixedDeltaTime does not change during the game's execution and ensures the stability of physical effects and simulations on different devices.",20
Which property of the Rigidbody component determines whether gravity will affect the object?, useGravity,mass, isKinematic,velocity,"The property of the Rigidbody component that determines gravity is called 'useGravity'.

If the value of the 'useGravity' property is set to 'true', the object will be subject to gravity and will freely fall under the influence of gravity force. If the value is set to 'false', the object will ignore gravity and will not fall.",21
"Which component provides static methods for determining the state of keyboard keys, mouse buttons, and other input devices?",Input,Collider,Rigidbody,Animator,"Input provides static methods for determining the state of keyboard keys, mouse buttons, and other input devices. With the help of this component, you can handle user input and respond to actions such as key presses, mouse movements, touch screen events, etc.",21
What does the NavMeshAgent component represent in Unity3D?,A component for controlling the navigation and movement of objects.,A component for controlling the lighting in the scene.,A component for working with physical effects.,A component for creating and controlling character animations.,"The NavMeshAgent component in Unity3D is a navigation agent used to control the movement of objects on a navigation mesh (NavMesh). The navigation mesh is a space divided into small cells, where accessible areas for movement are defined.

When an object is assigned the NavMeshAgent component, it becomes capable of automatically navigating the NavMesh, following predetermined paths to specified points. This allows for implementing automatic movement control for characters or other objects in the game.",22
"What is ""var"" in C#?",The keyword used to declare variables with implicit types.,The keyword used to declare a variable without initialization.,Used to create variables that hold only numeric values.,The keyword that indicates a variable with dynamic data type.,"In C#, the 'var' keyword is used to declare a variable without explicitly specifying its type. Instead of explicitly stating the variable type, the C# compiler determines the type of the variable based on the expression with which the variable is initialized.

var number = 10;
var name = ""John"";
var isValid = true;

Using 'var' simplifies and shortens the code, especially in cases where the variable type is evident from the initialization context. The 'var' keyword is particularly useful when working with anonymous types, LINQ queries, or complex data types, where specifying the exact type may be cumbersome and inconvenient.",23
What are access modifiers?,Keywords that determine the visibility and accessibility level of class members.,"These are special keywords that allow you to change the color and font of the text in the code, making it more readable.",These are special instructions that allow enabling and disabling specific features in the code.,These are special methods used to handle exceptions in a program.,"Access modifiers in programming languages determine the visibility and accessibility level of class members.
public: Members with the 'public' access modifier are accessible from any part of the program, including other classes and namespaces.
private: Members with the 'private' access modifier are only accessible within the same class in which they are declared.
protected: Members with the 'protected' access modifier are accessible within the same class and its derived classes.
internal: Members with the 'internal' access modifier are accessible within the same project (assembly). They are not visible from other projects.",23
Which Unity3D component is used to control character movement in the game?,Character Controller,Collider,Light,Particle System,"The Character Controller in Unity is a component that provides a simple way to control character movement in 3D space. It offers basic character control without using the physics-based Rigidbody, making it more suitable for controlling first-person or third-person characters, especially in games with constrained movement, such as platformers or RPGs.

The Character Controller provides methods for moving the character along surfaces, handling collisions with obstacles, and controlling gravity.",24
What is a draw call?,Draw Call - is a command sent to the graphics processor to render a specific object or group of objects.,Draw call - it is an event that occurs when the game engine updates the positions and rotations of objects on the screen.,Draw call - a special graphics effect that gives three-dimensional objects in games volume and depth.,"Draw call - is the process of loading graphical resources, such as textures and models, into the computer's memory.","Draw call (also known as rendering call) is an operation in which a graphics engine or API (such as Unity, DirectX, OpenGL) draws geometry or objects on the screen. A draw call is a command sent to the video card's processor to render graphical elements, such as vertices, indices, textures, materials, and shaders.

Each draw call is a separate request to the video card to display specific graphics information.""",25
What are layers in Unity3D?,This is a way of dividing a complex scene into separate parts for rendering control.,This is a function for grouping objects in the scene.,This is a component for controlling light sources.,This is a texture applied to objects in the scene.,"In Unity3D, layers represent a mechanism that allows classifying and grouping objects in the scene. Each object in Unity can be placed on one of the 32 available layers. This allows controlling the behavior of objects depending on their layer, performing collision checks with specific layers, and managing the visibility of objects in the scene.",25
What visual effect do orthographic cameras remove?,Perspective,Gamma color correction,Depth of Field,Glow,"Orthographic camera in Unity is a type of camera that creates an isometric or orthographic projection of the scene. Unlike a perspective camera, an orthographic camera does not create perspective distortion and does not take into account the distance to objects. All objects in the scene are displayed at the same scale, making this type of camera commonly used for 2D games or for creating isometric projections in 3D scenes.",26
What are partial classes?,Partial classes allow splitting the definition of a class across multiple files.,Partial classes can be inherited only once and cannot be extended by other classes.,Partial classes allow declaring static methods and properties that are not accessible to instances of the class.,Partial classes are used to create objects with a variable number of properties and methods.,"Partial classes in C# allow defining a class in multiple separate files. Each file contains a part of the class definition marked with the keyword 'partial.' All these parts are combined by the compiler into one class during compilation.

File1:
public partial class MyClass
{
    public void Method1()
}

File2:
public partial class MyClass
{
    public void Method2()
}",27
What is garbage collection (GC)?,This is an automatic memory management process that tracks and removes objects that are no longer in use.,This is an automatic process of deleting garbage from the system disk to free up space.,This is the process of clearing the RAM from data that is not currently being used by the program.,This is the process of removing unused variables from the program.,"Garbage Collection (GC) is an automatic memory management process in programs that tracks and removes objects that are no longer in use and have become inaccessible to the program.

In programming languages with automatic memory management, such as C# or Java, programmers do not need to explicitly release memory allocated for objects. Instead, the garbage collector tracks which objects do not have references to them from the program and periodically frees the memory occupied by these objects.

Garbage collection helps avoid memory leaks and simplifies the memory management process.",27
What is an API?,"API - Application Programming Interface, is a set of rules and instructions that defines how different components can interact with each other.",API - Application Programming Interface. It is a data encryption method used to ensure security on the Internet.,API - Application Programming Interface. It is a method of developing automated systems for creating complex web site systems.,API - is a device for connecting to a computer and inputting commands using voice.,"API (Application Programming Interface) - is a set of rules and protocols that define how different software components interact with each other. It provides a set of functions, procedures, classes, and structures that programmers can use to create applications or integrate different systems.
An example of an API could be the OpenWeatherMap API, where we can use an API key and send a request to get weather data. The result will be a response in JSON or XML format with weather information for the specified city or location.",28
What is Boxing/Unboxing in C#?,Boxing and Unboxing - these are processes of converting value types to reference types and vice versa.,Boxing and Unboxing are special methods used for serialization and deserialization of objects in C#.,Boxing and Unboxing are mechanisms that allow creating anonymous types and working with them in C#.,Boxing and Unboxing - are ways of memory management and resource releasing in C#.,"Boxing is the process of converting a value type data into an instance of a corresponding reference type. During boxing, the value of a variable is copied into a new container object on the heap, and the variable becomes a reference to that object.

int number = 42;
object boxedNumber = number;

Unboxing is the process of extracting a value from a boxed object and converting it back to the original value type. During unboxing, the value is extracted from the container object and converted to the original data type.

object boxedNumber = 42;
int number = (int)boxedNumber;",29
What are generics?,"Generics - it is a mechanism that allows creating generic types, methods, and classes.",Generics are a way of using methods that automatically determine data types during program execution.,Generics - is a mechanism for working with textual data.,Generics - are a set of pre-defined generic classes and methods that can be used in the C# language.,"Generics in C# represent a mechanism that allows creating generic types, classes, and methods that can work with various data types. This enables code reuse and provides type safety at compile time.

public static void Swap<T>(ref T a, ref T b)
{
    T temp = a;
    a = b;
    b = temp;
}

In this example, the Swap method is generic because it is defined with a type parameter T.",29
"Where are members with the ""private"" modifier accessible?",Only inside the same class in which they are declared.,Within the same project (assembly).,Within the same class and its derived classes (inheritors).,"From anywhere in the program, including other classes and namespaces.","Members with the ""private"" modifier are only accessible within the same class in which they are declared. This means that members with the ""private"" modifier are not accessible from other classes, even if those classes are in the same assembly.",30
Why do we need separate Update and FixedUpdate?,"Update is used where time dependency is important, FixedUpdate is used where independence from FPS is important.","Update is intended for physics calculations, while FixedUpdate is for animation and user input.",Update works in a separate thread from FixedUpdate.,Update and FixedUpdate do the same thing but are processed in an arbitrary order.,"Separating the update logic into Update and FixedUpdate helps to control object updates more accurately. This is particularly important for physics calculations and other operations that need to occur at a constant frequency.

Update: Called every rendering frame and is used for updating logic that depends on time (user input, object movement, animations).

FixedUpdate: Called at a fixed rate (0.02 seconds). It is intended for handling physics calculations and other operations that need to be performed at a constant frequency regardless of the game's FPS.",31
"To trigger the OnTriggerEnter event when two objects collide, what two components must be present on these objects?",Rigidbody and Collider.,Collider and MeshRenderer.,Collider and MeshFilter,MeshRenderer and MeshFilter,"The Rigidbody component is used to add physical properties to an object, allowing it to interact with the physical world, experience forces, gravity, and simulate realistic movements.

The Collider component defines the boundaries and shape of an object, enabling it to interact with other objects through collisions and collisions. Collider is also used to handle physical interactions with surrounding objects and other physical bodies in the scene.",31
What are Coroutines in Unity?,A mechanism that allows creating asynchronous operations and managing the timing of tasks in the game.,Mechanism that allows performing long operations without impacting the game's performance.,The mechanism used for asynchronous processing of user input.,Mechanism used for synchronous execution of code without delays.,"Coroutines in Unity are a mechanism that allows you to create asynchronous operations and control the timing of tasks in the game. They enable the execution of delayed actions or animations without blocking the main execution thread, which facilitates handling complex tasks such as animations, scene transitions, and other lengthy operations.

Working with Coroutines is done using the 'yield' keyword, which allows the function's execution to be paused and resumed later.",32
"In what order are MonoBehaviour lifecycle methods called, starting from object initialization to its destruction?","Awake, Start, FixedUpdate, Update, LateUpdate, OnDestroy","Awake, Start, Update, FixedUpdate, LateUpdate, OnDestroy","Start, Awake, Update, LateUpdate, FixedUpdate, OnDestroy"," Start, Awake, FixedUpdate, LateUpdate, Update, OnDestroy","Awake() - for initializing variables and components of the object.
Start() - for starting processes that depend on other objects.
FixedUpdate() - for working with physics and moving objects.
Update() - for updating the logic of the object and processing user input.
LateUpdate() - for executing logic that depends on the update of other objects.
OnDestroy() - called before the object is destroyed. Used for freeing resources and clearing memory.",33
What is Cinemachine in Unity?,It is a toolkit for creating complex camera movements and camera control in the game.,This is a special editor for creating animated camera effects.,This is a library for creating 3D models and animations in Unity.,This is a component for displaying animated effects in the scene.,"Cinemachine is a package for Unity that provides convenient tools for creating complex camera systems. It allows easy customization and control of cameras in the game, adding transition effects between cameras, real-time camera control, and creating dynamic camera tracks. Cinemachine simplifies the process of creating cinematic camera effects and provides a more flexible and efficient approach to camera management in a game project.",33
Which C# attribute displays a private variable in the inspector of objects?,SerializedField,Serializable,HideInInspector,Range,"The SerializedField attribute is used in Unity to display and edit private or protected variables in the inspector editor, making them editable without the need to make them public. This way, you can maintain encapsulation while still allowing the values to be edited in the inspector without accessing them from outside the class.",34
How much time does FixedUpdate take by default?,0.02 seconds,The time depends on the complexity of the logic you perform in this method.,1 millisecond,one frame time (1/60 second at 60 FPS),"FixedUpdate is called at a fixed frequency, which is by default 50 times per second (every 0.02 seconds). However, this value can be changed in the project settings.",35
What is Raycast in Unity3D and what is it used for?,This is a method for checking the collision of a ray with objects in the scene.,This is a component for handling user input.,This is a method for setting up the camera in the scene.,This is a component for creating a light beam in the scene.,Raycast is a method used to detect collisions of a ray with objects in the scene. The ray represents a virtual beam of light that originates from a starting point and is directed in a specific direction. Raycast checks if this ray intersects with any colliders in the scene and returns information about the first object it collides with.,35
What does the Range attribute do?,Limits the value of the variable using a slider.,He checks the values of variables through a text field widget.,It restricts variable values using a color picker widget.,It represents the valid variable options in the dropdown list.,"The [Range(min, max)] attribute in Unity is used to restrict the range of values for numerical fields (e.g., float or int) in the inspector. It allows setting a minimum and maximum value that the numerical field can take.

Applying the [Range] attribute to a numerical field allows the developer to set value constraints in the Unity editor's inspector, preventing the input of invalid or incorrect values for that field.",36
Who has access to variables with the protected modifier at the class level?,Accessible to the class itself and its derived classes (subclasses).,They are accessible only within the class where they are declared.,They are accessible only within classes that are in the same namespace as the class where they are declared.,They are accessible only in classes located in the same source code file as the class where they are declared.,"Variables with the ""protected"" modifier at the class level are accessible to the class itself, derived classes (inheritors), and any other classes within the same assembly.",37
What does the [Space(20)] attribute do?,It adds a 20-pixel margin above the variable inside the object inspector.,It inserts 20 spaces as the default value.,It inserts 20 pixels on the left and right of the variable in the inspector.,It limits the number of consecutive whitespace characters to 20.,"The [Space(X)] attribute is used in Unity to add vertical space (padding) between serialized fields in the inspector. The value specified in parentheses determines the amount of spacing in pixels.

For example, if we have multiple serialized fields in a MonoBehaviour script and we want to add a large vertical space between them in the inspector, we can apply the [Space(20)] attribute before the field that should be separated from the others.",37
Can a class implement two interfaces that have the same method declarations?,"A class can implement two interfaces with the same methods, but you need to specify the membership of each method.","A class can implement two interfaces with the same methods, but their implementation must be the same.","When the method is called, only the implementation of the first interface will be used.","A class cannot implement two interfaces with identical methods, as it causes a method name conflict.","When a class implements two interfaces with the same method names, it must explicitly indicate which method belongs to which interface to avoid ambiguity. This is done by using the full qualification of the method name, indicating the corresponding interface:

((IInterface1)myObj).MyMethod();   // Call MyMethod from IInterface1
((IInterface2)myObj).MyMethod();  // Call MyMethod from IInterface2",38
What is a draw call in Unity?,"This is a command for displaying objects on the screen, which contains information about the object's parameters.",This is part of the rendering process that is responsible for calculating lighting.,This is the process of handling physical interactions between objects in Unity.,This is a way of determining which objects should be displayed on the screen.,"Draw call in Unity is the process of sending graphics commands to render objects on the screen. Every time Unity renders objects in the scene, it generates a draw call for each object or set of objects with the same materials and display settings.

A draw call contains information about which object to render, which material to use, its position, rotation, and scale, as well as other settings such as blending modes, shading on or off, masking, etc.",39
"What does this code do:
float Answer = Random.value * 10f;",Selects a random value between 0 and 10.,Selects a random value greater than 10.,Selects a random value less than 10.,Selects a random value that is a multiple of 10.,"Random.value returns a random floating-point value in the range from 0.0 (inclusive) to 1.0 (exclusive). Therefore, it is a function that generates a random floating-point number from 0 to 1.",39
What is encapsulation (1st principle of OOP)?,Encapsulation is hiding the implementation details of objects and providing an interface to work with them.,The process of turning an object into a capsule that can be used to store other objects.,The ability of an object to interact only with objects of its own class.,Principle that prohibits the use of public methods and fields in a class.,"Encapsulation is the first principle of OOP (Object-Oriented Programming), which involves combining data and methods that operate on this data into a single object (class) and providing access to them only through the interface (public methods) of this object. The essence of encapsulation is that the internal state of the object remains hidden from external code, and changes to the object's data are made only through the established methods.

The main goal of encapsulation is to control access to the data and methods of the object, providing a protected interface for working with the object.",40
Which statement is not true?,Only humanoid characters have bones.,The update function is never called automatically until the object is active.,Coroutines will continue to run on inactive objects.,All component scripts inherit from MonoBehaviour.,"Bones are commonly used in character or object animations to control their movement. In computer graphics and 3D modeling, bones are invisible points or entities used to create a hierarchical structure that describes and controls the movement of the model.",41
"What is a graphics library (OpenGL, DirectX)?",A graphics library is a set of tools and functions for managing graphics and visual effects.,A graphics library is a set of physical components that are connected to improve graphical output.,A graphics library is software for creating and editing photos and images.,Graphics library is a system that manages the placement and display of graphical elements on websites.,"A graphics library, such as OpenGL or DirectX, is a set of software interfaces and functions that developers can use to create and manage graphics in applications. They provide access to low-level rendering operations and interaction with the video card.
For example: the C++ command ""pDeviceContext->ClearRenderTargetView(pRenderTargetView, DirectX::Colors::SteelBlue);"" instructs the DirectX device to clear the back buffer and fill it with the specified color before starting to render a new frame.",41
"What is the ""Single Responsibility Principle"" (1st principle of SOLID)?",A class should be responsible for only one functionality or task.,The principle requires each method in a class to perform only one task.,"The class should perform one operation at a time, and all other operations should be deferred.",Every class should be as useful as possible and include as much functionality as possible.,"The Single Responsibility Principle means that each class should have only one reason to change. In other words, a class should be responsible for only one well-defined functionality or task.

The essence of this principle is to separate different functionalities into different classes. This reduces the complexity of classes, makes them more understandable, and improves the maintainability of the source code. When a class performs multiple unrelated tasks, changes in one task may affect others, making it more difficult to understand and maintain the code.",42
What is Unity Package Manager (UPM)?,This is a tool for installing and managing packages and their dependencies in a Unity project.,"This is a special component for creating packed files of scenes, models, and assets in Unity.",This is a tool for backing up and restoring Unity projects.,This is a tool for sharing assets and code between different Unity projects.,"Unity Package Manager (UPM) is a tool in Unity that provides management and installation of packages and their dependencies in a Unity project. It allows developers to easily add third-party packages to their projects and manage versions and updates of these packages.

UPM provides a convenient interface for searching, installing, and removing packages from the Unity Asset Store, Git repositories, or local paths. It also automatically resolves dependencies between packages, making it easy to integrate third-party libraries and tools into the project.",43
What is Procedural Generation in Unity?,"A technique for generating content in a game, such as levels, worlds, or textures.",Method for generating random numbers in the game process.,Algorithm for optimizing character animation work.,A mechanism for creating random collisions between objects in the scene.,"Procedural Generation in Unity is a method of creating content such as levels, worlds, textures, models, animations, and other elements using algorithms and random numbers, instead of traditional manual creation of each element.

Procedural generation allows developers to automate and streamline the process of creating a large volume of content, which is particularly useful for generating large open worlds or repetitive elements in a game.",43
"User interface elements, such as images and buttons, can be anchored to specific positions on the screen to create adaptive interfaces. Which Unity features help achieve this?",Anchors and pivots.,Events and raycasts.,Quaternions and Euler angles.,"Opacity and transparency (Opacity, transparency).","Anchors and Pivots in Unity are used to control the positioning and scaling of UI elements and sprites.

Anchors: Anchors determine how elements will stretch and scale when the size of the parent element or the screen changes. Setting anchors allows elements to automatically adjust to different screen resolutions or sizes of the parent container.

Pivots: Pivots determine the point around which an object rotates and scales. Setting pivots allows you to control the pivot point for rotation and scaling, which is useful for animation and positioning of objects.",44
"Where are members with the ""protected"" modifier accessible?",Within the same class and its derived classes (inheritors).,Within the same project (assembly).,"From anywhere in the program, including other classes and namespaces.",Only within the same class in which they are declared.,Members with the 'protected' modifier are accessible within the same class and its derived classes (inheritors) but are not accessible from other classes outside the inheritance hierarchy.,45
What is the difference between method overloading and method overriding?,"Method overloading is changing the method's signature, while method overriding is changing its implementation.","Method overloading is the process of changing the implementation of a method, while method overriding is changing its signature.","Overloading is used in static polymorphism, while method overriding is used only in dynamic polymorphism.","Method overloading is used to change the visibility of a method, while method overriding is used to change accessibility.",Method overloading refers to creating multiple methods with the same name but different parameters. Method overriding occurs when a derived class changes the implementation of a method inherited from a base class.,45
What is abstraction (4th principle of OOP)?,"Abstraction is representing objects in a simplified form, separating important characteristics from unnecessary details.",This is the ability to use abstract classes for creating objects.,This is the ability to use abstract fields and methods in a class.,This is an object-oriented programming principle that requires all classes in the program to be abstract.,"Abstraction is an object-oriented programming principle that involves representing objects in a simplified form, hiding implementation details, and highlighting only essential characteristics and functionality.

The main goal of abstraction is to provide a clear and convenient interface for interacting with objects, hiding complex details, and making the code more understandable and readable. Abstraction allows us to abstract from internal implementation details and focus on the important aspects of an object.",46
Which method in MonoBehaviour is called every frame before rendering and is used for updating graphical elements?,Update,OnRenderObject,FixedUpdate,Start,"The Update() method in the MonoBehaviour class is called each time before rendering a frame. It is used to update graphical elements and other components of game objects. In Update(), you can perform logic updates, movement, animation, and other actions that need to occur on every frame of the game.",47
When should you use StringBuilder instead of string?,StringBuilder is used when you need to frequently concatenate or modify strings.,"This is the same thing, string is a shorthand notation for StringBuilder.",StringBuilder should be used when you need to perform string formatting operations.,StringBuilder is used only when you want to work with small strings.,"String is an immutable data type, which means that once a string is created, it cannot be changed. All operations on strings, such as concatenation or replacing characters, actually create new strings in memory.

On the other hand, StringBuilder is a mutable data type that allows you to modify the content of a string without creating new objects. The internal representation of StringBuilder in C# is based on an array of characters (char[]).",47
What is inheritance (2nd principle of OOP)?,"The ability to create new classes based on existing ones, inheriting their properties and methods.",The ability to create objects from abstract classes.,The ability of a class to include all properties and methods of another class.,This is a principle that allows classes to inherit only static methods.,"Inheritance allows creating new classes based on existing (parent) classes, inheriting their properties and methods.

The principle of inheritance enables code reuse that has already been implemented in the base class, reducing code duplication, and improving program structure. The derived class can also add its unique functionality or override the behavior of methods in the base class.",48
By which arithmetic operation can quaternions be combined?,Multiplication.,Division.,Addition,Subtraction,"To combine quaternions in Unity, the multiplication (*) operation is used.

For example, if we have two quaternions quat1 and quat2, we can combine them as follows:
Quaternion combinedQuaternion = quat1 * quat2;",49
What is the fundamental difference between a framework and a library?,Framework provides architecture and development rules. Library is a set of utilities and functions to solve specific tasks.,Framework provides low-level functionality. Library - high-level functionality.,A framework is a set of utilities and tools. A library is a set of functions.,Framework is a collection of design patterns. Library is a collection of various project documentation.,"Library - is a collection of pre-written code used to simplify tasks. Libraries are designed for specific purposes. For example, Zenject, Newtonsoft.Json, Unity UI.

Framework - is a comprehensive set of low-level libraries that enables the user to build applications. It manages all library calls and provides a flow of functions. A framework is like a foundation on which developers build applications for specific platforms. Examples of frameworks include Cinemachine, ProBuilder, Unity Input System. Unity itself is a framework.

We use a library in our code, while a framework uses our code.",49
Implicit type conversion is:,int i = 10; double d = i;,double d = 10.5; int i = (int)d;,"string str = ""10""; int i = int.Parse(str);",double d = 10.5; int i = Convert.ToInt32(d);,"Implicit type casting in C# - is an automatic conversion operation of a value from one type to another without the developer's explicit specification. In the case of implicit type casting, the compiler performs the conversion on its own if it is safe and does not result in data loss or value distortion.",50
Are variables with the private modifier inherited when a class is inherited?,No.,"Yes, they are accessible in the derived class.",They can be inherited only if the derived class is declared in the same file as the base class.,Possible only when using the special keyword 'inherit'.,"The private modifier makes variables accessible only within the class where they are declared and does not allow access to them from other classes, including derived classes.

When a class inherits from another class, it can only access the public and protected members of the base class. Private variables, methods, or other class members remain inaccessible to the inheriting class.",51
What is ECS?,"Component-based Software Development paradigm, which separates entities, components, and systems.",This is a group of initials of well-known personalities working in the gaming industry.,This is a programming language designed for working with quantum computers.,"This is an abbreviation for 'Eternal Creative System,' a philosophy about a creative approach to work.","ECS (Entity-Component-System) is a software development paradigm widely used in the development of computer games. ECS is an architectural approach that helps separate the logic and data of components, improving performance and simplifying the development of complex systems.

Key components of ECS:

Entity: Represents a game object or object in the system.

Component: Components are containers for data representing specific aspects of an entity.

System: Systems process entity components and implement game logic or behavior.",52
What does the Destroy function do?,Destroys the specified game object after the current update cycle.,Deletes the specified game object when the application terminates.,Immediately removes the specified game object.,Immediately deactivates the specified game object.,"The Destroy function in Unity is used to destroy objects during gameplay.

When the Destroy method is called, it marks the object for destruction. However, the actual destruction of the object does not happen immediately; it occurs at the end of the current frame or on the next frame. This means that the object will continue to exist and execute its methods until the current frame is finished, and only after that, it will be removed from the scene and memory.

Destroy(objectToDestroy);",52
What is a constant variable?,A constant variable with the keyword 'readonly'.,"Variable with the keyword ""final"".",A variable that can only be declared with a specific data type.,A variable that can be declared without initialization.,"Final variable (final variable) is a variable whose value cannot be changed after it has been initialized. In other programming languages, such a variable may be called a ""constant"" or ""immutable variable"".

In the C# language, the keyword for creating final variables is readonly. After declaring and initializing a final variable in the constructor or at the declaration, its value cannot be changed thereafter. This ensures the security and reliability of the program, as it guarantees that the value of the variable will remain unchanged after initialization.",53
What is Unity Collab and what is it used for?,It is a collaborative development and version control tool.,This is a component for handling collisions and object collisions in the scene.,This is a framework for creating multiplayer games.,This is a social network for Unity3D developers.,"Unity Collab (formerly known as Unity Teams) is a collaborative development and version control tool provided by Unity Technologies. It is used to facilitate collaborative work on projects in Unity3D, streamline change and version management, and ensure a more secure and stable development process.

Key features include:

Version control
Collaborative development
Access control
Cloud storage.",54
How can you load a new level in Unity3D?,With the LoadScene method.,"By changing the value of the variable ""level"" in the code.",Copying the file with the level to the Assets folder.,By clicking the 'New Level' button on the toolbar.,"The method SceneManager.LoadScene() allows you to load a new level from the scene. You can pass it the name or index of the level to be loaded.
// Load the level with the name ""Level2""
SceneManager.LoadScene(""Level2"");",54
Which MonoBehaviour method is executed by default in Editor mode?,Reset,OnBecameInvisible,OnAnimatorMove,OnTriggerEnter,"The Reset method is a MonoBehaviour method that runs by default in the editor mode. This method is called when the script is attached to a GameObject or reset in the Inspector. It allows you to initialize or reset variable values in the script, providing a consistent initial state when working in the Unity editor.",55
What is the difference between a class and a structure?,"Classes support inheritance, structures do not. Class objects are passed by reference, structures are passed by value.","Classes can contain methods, while structures can only contain fields.","Classes need to be initialized using the ""new"" keyword, structures do not.","Classes inherit other classes, while structures only other structures.","Classes support inheritance. Structures do not support inheritance. Objects of a class are passed by reference, and changes made to one object may affect other objects that reference the same instance. Structures are passed by value, and each instance of a structure contains its own copy of data.

Objects of a class are stored in the heap. Structures are stored in the stack or the heap.

Class fields can have a value of ""null"" if they are not initialized. Structure fields must always have a value.

In general, working with structures can be more performance-efficient.",56
When is the Reset method automatically called?,When adding a component to an object or resetting its values in editing mode.,When a game object moves from one scene to another.,When the scene starts or restarts.,When the scene starts or restarts for a deactivated game object.,"The Reset() method is automatically called in Unity for components when they are added to an object or reset to their default values. This happens in the following cases:

When adding the component to an object in the scene or in a prefab.
When resetting the component to its default values, which can be done through the component's context menu or the ""Reset"" button in the component's inspector.",56
Explicit type casting is:,double d = 10.5; int i = (int)d;,int i = 10; double d = i;,"string str = ""10""; int i = int.Parse(str);",double d = 10.5; int i = Convert.ToInt32(d);,"Explicit type casting in C# is an operation that allows explicitly changing the type of a value from one type to another. With explicit type casting, the developer explicitly indicates that they want to convert a value from one type to another, even if such conversion may potentially result in data loss or value distortion.

Explicit type casting is performed using the casting operator (type)expression, where type is the target type to which the value needs to be cast, and expression is the expression that needs to be cast to the specified type.",57
"The ""Open/Closed Principle"" (2nd SOLID principle) states:",Classes and modules should be open for extension but closed for modification.,Changing a method in a class should not affect other methods in the same class.,Classes should be open for extension and closed for modification to ensure code is easily modifiable.,"All methods in the class must be open for overriding in subclasses, and fields must be private.","The Open/Closed Principle from SOLID states the following:
""Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.""
This means that code should be written in a way that adding new functionality does not require modifying existing code. New features should be added through extension, using inheritance, interfaces, composition, and other techniques, without altering the functionality of existing components.",58
What is Polymorphism (3rd OOP principle)?,The ability of objects of one class to be used as objects of another class through a common interface.,This is the ability to create objects of different classes from one abstract class.,The ability of objects to interact only with objects of their own type.,The ability to use the same object for different purposes in the program.,"At the core of polymorphism is the idea that objects with a common interface (e.g., shared methods) can be used according to that interface, regardless of their actual type. This allows passing objects of derived classes where an object of the base class is expected, and invoking methods of the descendants without knowing their specific type.",58
In which format does the Microphone class save audio data?,Audio clip asset,MP3 file,WAV file,OGG file,"The ""Microphone"" class is used to access the microphone of a computer or mobile device and record audio from it. It allows developers to create applications that can interact with the microphone, record sound, and analyze or play audio data in real-time. This can be useful for creating voice controls, audio games, or audio analysis in applications and games.",59
Some types of materials include normal maps. What is the purpose of a normal map?,"It creates surface details on the mesh: bumps, dents, and scratches.",This is a level of detail (LOD) system that gradually reduces the number of polygons as the camera moves away.,It replaces geometry to create high-polygon objects.,It programmatically reduces the number of polygons in meshes.,"""Normal Map"" in computer graphics is used to give flat or low-polygon models a visual impression of detail and volume. It is one of the important types of texture maps used in 3D model rendering.

In game development and visualization, a normal map allows tricking the viewer's eye by creating the effect of a highly detailed surface without actually adding new polygons. Instead, it uses special color data that encodes information about the surface normals for each pixel.",60
What is Zenject?,It is a framework for dependency injection.,This is a data compression algorithm used to reduce the size of files in Unity.,It is a tool for creating complex mathematical calculations and algorithms in Unity.,This is a library for working with sounds and audio effects in Unity.,Zenject is a framework for managing dependencies and Dependency Injection (DI) in Unity. It provides convenient tools for organizing project structure and managing dependencies between components.,60
Which of the following methods are used for creating or destroying objects in Unity?,Instantiate() and Destroy(),Start() and FixedUpdate(),Update() and LateUpdate(),OnEnable() and OnDisable(),"Instantiate(): The method takes a prefab as a parameter - a template of the object to be created, and additional parameters such as position and rotation, and creates a new instance of the object.

Destroy(): This method is used to remove a game object from the scene during gameplay. It takes the reference to the object to be removed as a parameter and destroys it, freeing up the memory and resources it occupied.",61
"Where are members with the ""internal"" modifier accessible?",Within the same project (assembly).,"From anywhere in the program, including other classes and namespaces.",Inside the same class and its derived classes (inheritors).,Only inside the same class where they are declared.,"internal - is an access level that restricts access to class members only within the same assembly in which they are declared. An assembly is a unit of compilation, which can represent a single library, executable file, or module. If a class member is declared with the internal modifier, it can be used in any other class within the same assembly but will be inaccessible to classes outside of that assembly.",62
Who needs the Collaborate function in Unity Teams?,"To team members for saving, sharing, and synchronizing Unity projects.",For developers who make changes to the Unity source code.,Companies that raise funds for projects through crowdfunding.,Developers use it as a version control system.,"The Collaborate function in Unity Teams is used by developer teams to save, collaborate, and synchronize Unity projects. It facilitates more efficient teamwork on projects, file sharing, version control, and collaborative project editing.",62
What is the purpose of the PlayableDirector component?,Control the playback of the timeline in the scene.,Record the gameplay session as a video file.,Switching between different cameras in the scene.,Simultaneously run multiple functions on different game objects.,"The PlayableDirector component in Unity is used to control time and playback of Timelines. Timelines are a visual animation system that allows you to create complex and interactive event animations in a game or application.

PlayableDirector allows you to play, stop, pause, and switch Timelines during the runtime of an application. This is useful for creating scenarios and cinematic moments, as you can control events and object animations on the scene through timelines and scripts.",63
What are heap and stack?,"Stack is a memory area used for storing local variables, while heap is a region of dynamic memory used for storing objects.","Stack is a place where objects and data are stored, while heap is a memory area used for performing arithmetic operations.","The stack is an area of memory where runtime program data is stored, and the heap is the place where instructions and code of the program are stored.","The stack is an area of memory where data structures are stored, while the heap is a place where functions and methods of the program are stored.","""Heap and stack"" are the two main memory areas used in programming, including C#.

Stack: The stack is a memory area where local variables of methods, method parameters, and function call context are stored. The stack is managed automatically and used to store data in a ""last in, first out"" order.

Heap: The heap is a dynamic memory area where objects and data created and managed during program execution are stored. Unlike the stack, the size of the heap is not fixed and can change during runtime.",64
"What is the ""Liskov Substitution Principle"" (LSP) (3rd principle of SOLID)?",Objects of the base classes should be replaceable with objects of derived classes.,A derived class should be the descendant of only one base class.,All methods of the base class have been overridden in the derived classes.,Classes cannot be changed after their creation to ensure their stability.,"The Liskov Substitution Principle (LSP):
""Objects of a base class should be replaceable with objects of its derived classes, and this should not affect the correctness of the program.""

Suppose we have a class called Bird with a method Fly(), and we have two derived classes from it, Penguin and Sparrow. According to the LSP, we should be confident that calling the Fly() method on Bird objects will not result in errors or unexpected behavior for instances of the Penguin and Sparrow classes. It might be reasonable to override the Fly() method for Penguin to do nothing (since penguins don't fly), but this should not break other parts of the program that expect objects of type Bird.",64
What is static polymorphism?,Polymorphism - a mechanism where the same method name can be used to perform different actions (overloading).,Mechanism that allows creating new methods during program execution.,It is used to perform different actions depending on the value of the variable.,The mechanism that provides dynamic binding of method calls.,"Static polymorphism (also known as method overloading or compile-time polymorphism) is a mechanism in programming where the same method or operator name can be used to perform different actions depending on the types of arguments passed to the method.

Static polymorphism is resolved at compile time, and the compiler determines which specific method or operator should be called based on the types of arguments used in the function call. This allows for overloading methods or operators with different types of parameters and handling them accordingly.",65
What is batching in Unity?,This is a mechanism that allows combining multiple objects or graphical elements into a single draw call.,This is the process of objects interacting with different materials to create new effects in the game.,This is a technique used for managing data packets in Unity.,This is a method of optimizing textures and level of detail to improve graphics in Unity.,"Batching in Unity is the process of combining multiple graphics elements into one to reduce the number of draw calls and improve the game's performance.
Batching helps optimize game performance, especially when dealing with a large number of objects in the scene. However, not all objects can be batched, and the optimization requires adherence to specific limitations and rules.",66
What statement best describes the Quaternion.Euler function?,Converts the orientation measured in degrees to a quaternion.,"Converts a quaternion into a string that stores its rotation along the X, Y, and Z axes in degrees.",Converts orientation from radians to quaternion.,He converts a quaternion to Vector3.,"The method Quaternion.Euler(x, y, z) in Unity is used to create a quaternion representing a rotation around the X, Y, and Z axes.

It takes three values in degrees: x, y, and z, and returns a quaternion representing the corresponding rotation. This method is convenient for creating quaternions when rotation angles are specified in a developer-friendly format in degrees.",66
"What is meant by ""dependency management""?","This is the process of establishing, injecting, and managing dependencies between components of a program.",This is the ability to access parent components and use their resources.,This is the process of assessing the interactions between different elements of the program and determining their significance.,This is the ability of the program to automatically create dependencies between components without programmer intervention.,"Dependencies are relationships between different components, modules, or objects of a program, where one element (referred to as the client or consumer) requires access to another element (referred to as the service or provider) to perform its tasks.

Dependency management is the process of establishing, passing, and controlling dependencies between components of a program. One way to manage dependencies is through the use of Dependency Injection (DI) patterns, which allow for creating weak connections between components and provide a more flexible program structure.",67
How to get the nearest power of two greater than the number in C#?,"double result = Math.Pow(2, Math.Ceiling(Math.Log(number, 2)));","double result = Math.Log(number, 2);","double result = Math.Ceiling(Math.Pow(2, Math.Log(number, 2)));",double result = Math.Log(Math.Pow(Math.Ceiling(number)));,"Math.Pow(base, exponent) - a function that raises the base to the specified exponent.
Math.Ceiling(value) - a function that rounds the value up to the nearest integer.
Math.Log(number, base) - a function that calculates the natural logarithm of a number with the specified base.
In other words, first, we calculate the logarithm of the number with base 2, round it up, and then raise 2 to the resulting power. This is useful for computing memory buffers and working with texture sizes.",68
What is the asymptotic complexity of an algorithm?,Asymptotic complexity is an estimation of the behavior of an algorithm as the size of the input data increases.,"Asymptotic complexity is the number of operations performed in an algorithm, regardless of the size of the input data.",Asymptotic complexity is the exact number of steps required to execute an algorithm.,Asymptotic complexity of an algorithm is the amount of memory in bytes that the algorithm occupies during execution.,"Asymptotic complexity allows us to estimate how quickly the execution time or the amount of resources, such as memory or CPU time, consumed by an algorithm grows as the size of the input data increases.

Asymptotic complexity is usually expressed using """"Big O"""" notation. The Big O notation specifies the upper bound of the algorithm's growth rate relative to the size of the input data. For example, if the complexity of an algorithm is estimated as O(n^2), where n is the size of the input data, it means that the execution time of the algorithm will grow proportionally to the square of the size of the input data.",68
"What is the ""Interface Segregation Principle"" (4th principle of SOLID) about?",Many small specialized interfaces are better than one general interface.,The interface should contain as many methods as possible to simplify the code.,Each interface should be implemented by a single class to avoid code duplication.,All classes must implement a common interface with mandatory methods.,"Interface Segregation Principle:
""Many small, specialized interfaces are better than one general interface.""
The essence of this principle is to split large and complex interfaces into many small and specialized ones so that clients can implement only those methods that are truly needed, rather than being forced to implement unnecessary methods.",69
How is an abstract class different from an interface?,"An abstract class can provide implementation of methods and properties, while an interface only defines signatures.","An abstract class can be used to create object instances, while an interface cannot.","An abstract class can implement multiple interfaces, while an interface can inherit only one abstract class.",An abstract class and an interface provide the same functionality and can be used interchangeably.,"An abstract class can provide implementations for methods and properties, whereas an interface only defines the signatures of methods and properties without providing their implementations.
A class can inherit only one abstract class but can implement multiple interfaces.
An abstract class can provide common functionality for its derived classes and define a base structure and behavior. Interfaces, on the other hand, define only contracts that a class must implement without providing a common implementation.
An abstract class can be extended by adding new methods, properties, and fields, whereas an interface is typically not subject to changes to avoid breaking existing contracts.",70
What does MonoBehaviour inherit from?,from the Behaviour class,From the Class class,from the Object class,from the Component class,"MonoBehaviour inherits from the Behaviour class. The Behaviour class, in turn, inherits from the Component class. Component is the base class for all components in Unity.",70
What is operator overloading?,This is the ability to define new behavior for operators on custom data types.,This is the ability to change the order of operations during program execution.,This is the ability to create new operators not related to the existing ones.,This is a construction with the 'overload' keyword that allows executing an operator multiple times in a row.,"Operator overloading is a mechanism that allows defining custom behavior for operators when working with objects of user-defined classes. It enables using standard operators such as +, -, *, /, ==, !=, and others with objects of user-defined classes, and also allows defining custom logic for their operation.

// Operator overloading for addition
public static Point operator +(Point p1, Point p2)
{
return new Point(p1.X + p2.X, p1.Y + p2.Y);
}",71
What is stack overflow?,This is a situation when the stack memory is filled beyond its maximum capacity.,This is an error that occurs when trying to assign a value to a variable that is outside the range of that variable.,This is a situation when the program doesn't have enough RAM (Random Access Memory) to execute tasks.,This is an error that occurs when trying to access non-existent memory or object in the program.,"Stack overflow is a situation when the stack memory, which is used to store local variables, method parameters, and function call context, becomes filled beyond its maximum capacity.

Stack overflow typically occurs when a recursive function calls itself indefinitely, or when nested functions are called too deeply and are not freed from the stack in time.

When a stack overflow happens, it usually results in a ""StackOverflowException"" exception, which leads to the program either stopping its execution or crashing.",72
What is Animation Rigging in Unity?,This is a system for creating and managing complex animations using controlled bones and controls.,This is a method for controlling the position of objects in the scene using kinematic equations.,This is a technology for creating and managing light in the scene.,This is a system for optimizing and managing resources in the project.,"Animation Rigging in Unity is a set of tools and a system that allows you to create complex character and object animations using programmable controllers and manipulate bones and meshes to achieve more realistic and unique movements. This enables animators and developers to create more dynamic and engaging animations, as well as simplifies the process of animating complex objects and characters.",72
What is a stack overflow?,"Storing different data types in an array is possible, but in the form of objects.",Storing different data types in an array leads to loss of precision and errors when accessing elements.,System.Array automatically converts all elements into a unified data type.,"No, an array can only store homogeneous elements of one data type.","System.Array is the base class for all arrays in C# and allows storing elements of different types in a single array.

Array myArray = new object[5];
myArray[0] = ""Hello"";
myArray[1] = 10;
myArray[2] = true;
myArray[3] = 3.14;
myArray[4] = DateTime.Now;

However, when working with System.Array, it's important to note that elements are stored as objects, and explicit type casting may be required when accessing them back to their original type for using specific functions or properties.",73
"What is the ""Dependency Inversion Principle"" (5th principle of SOLID)?",High-level modules should not depend on low-level modules. Both types of modules should depend on abstractions.,High-level modules should depend on low-level modules. Abstractions should depend on details.,"Classes should depend only on specific implementations, not abstractions.",Classes should be written so that they cannot change their behavior during runtime.,"Dependency Inversion Principle:
High-level modules should not depend on low-level modules. Both types of modules should depend on abstractions.
Abstractions should not depend on details. Details should depend on abstractions.
Suppose we have a class called OrderProcessor that depends on the DatabaseConnection class to access the database. If we want to use a different data source, we would have to modify the OrderProcessor class. Instead, we can introduce an abstraction, for example, an interface called IDatabaseConnection, and make the OrderProcessor depend only on this interface. Now, we can easily replace DatabaseConnection with a different implementation without affecting the OrderProcessor.",74
What is the typical use of the OnAnimatorMove event in MonoBehaviour objects?,For intercepting and handling updates to the position and rotation of an animated object.,For playing the animation after it's finished.,For synchronizing an object's animation with the current time.,For detecting any movement of the object.,"The ""OnAnimatorMove"" event in MonoBehaviour objects is commonly used to intercept and process updates to the position and rotation of the object that were applied by the animator in the frame. This allows the programmer to influence the movement of the object, taking animations into account, and add additional logic related to movement and animation in the object's scripts.",74
Which fragment of C# code constantly updates the Y-axis?,"transform.Rotate(Vector3.right, RotSpeed * Time.deltaTime);","transform.localRotation *= Quaternion.Euler(0f, RotSpeed * Time.deltaTime, 0f);","transform.RotateAround(Vector3.up, RotSpeed * Time.deltaTime);",transform.SetParent(null);,"The ""transform.Rotate"" method in Unity is used to rotate a game object in three-dimensional space. It allows you to change the orientation of the object relative to its current position.",75
"How is ""yield"" used in iterators?",yield is used to define values that should be returned at each iteration.,yield is used to declare variables in iterators.,yield is used to create iterators and generators in C#.,yield is used to define the start of execution for each iteration.,"In iterators, ""yield"" is used to define values that should be returned on each iteration. When the execution reaches the ""yield return"" statement, the value is returned from the iterator, and the execution is paused.

For example:

public static IEnumerable<int> GetNumbers()
{
    yield return 1;
    yield return 2;
    yield return 3;
    yield return 4;
    yield return 5;
}",76
What is an Assets Bundle?,"A ""bundle"" is a package containing one or multiple resource files.",Special folder containing scripts and resources.,"Deprecated and unused resource management method in Unity, replaced by other approaches.",The file format for storing compiled scripts in Unity.,"""Assets Bundle"" in Unity refers to a special file that contains one or multiple resources (such as textures, models, audio, video, and others) packed into a single unit. These bundles can be created and loaded dynamically in the game, allowing for more efficient resource management.

Assets Bundles provide developers with a more flexible and efficient way to handle resources in Unity, which is particularly important for mobile platforms and games with a large amount of content.",76
What is Shader Graph in Unity?,This is a visual graphical tool that allows creating shaders without the need to write code.,This is a plugin for Unity that allows exporting graphical effects.,This is a component in Unity that allows creating dynamic visual effects for objects in the scene.,This is the system in Unity responsible for managing the physical simulation of objects.,Shader Graph in Unity is a visual graphical tool that allows you to create shaders (materials) for objects in the scene without the need to write code. It provides an interface for creating complex shaders by connecting ready-made blocks representing various shader functions and operations.,77
"The bullet GameObject moves quickly through the scene using the RigidBody component. Sometimes, it passes through solid objects even when they have colliders. How to fix this?",Change the Collision Detection property of the Rigidbody to Continuous Dynamic or Continuous Speculative.,Enable the IsKinematic property of Rigidbody.,Increase the value of Fixed Time Step in the Project Settings dialog to change the frequency of the FixedUpdate event.,We need to increase the size of the colliders to more effectively detect collisions.,"In Collision Detection, which is responsible for detecting collisions, there are several parameters:

Discrete: Default value. Collisions are processed based on calculations for each frame. This is suitable for most objects.

Continuous: Continuous collision processing is used. This prevents objects from penetrating each other at high speeds. However, this mode is more performance-intensive.

Continuous Dynamic: This mode combines the advantages of discrete and continuous collision processing.

Continuous Speculative: An extension of the Continuous mode, which makes assumptions about the future position of the object based on its velocity.",78
What is Lerp in Unity?,Lerp is a method that allows smooth interpolation between two values.,"Lerp is an abbreviation for ""Linear Interpolation,"" a special technology for improving light rendering.","Lerp is a type of material applied to objects to change their physical properties, such as elasticity or friction.",Lerp is a special type of game characters that move along a specified trajectory on the screen.,"In Unity, Lerp (Linear Interpolation) is a function provided within the Unity framework to perform linear interpolation between two values along a time axis. The Lerp function in Unity can be used for smooth movement of objects, changing their size, modifying color or transparency, and creating animation between two values.

In Unity, the Lerp function uses the following syntax:
Vector3.Lerp(start, end, t);

start and end are the initial and final values between which interpolation is performed.
t is the weight factor (time) ranging from 0 to 1.",78
What is a Nullable type in C#?,A special data type that allows a variable to hold a value of null.,"Allows a variable to have only the value ""null"" and nothing else.",Represents a special type of data that can change its type during program execution.,Allows a variable to have multiple values simultaneously.,"Nullable type in C# represents the possibility for a variable to have an additional value of ""null"" in addition to its main data type. Regular data types in C#, such as int, bool, double, and others, cannot hold a value of ""null."" However, if we want a variable to be able to accept a ""null"" value, we can use the Nullable type. The Nullable type is created by adding the ""?"" symbol after the main data type. For example, int? represents a Nullable type for an integer value.

int? nullableInt = null;
bool? nullableBool = true;
double? nullableDouble = 3.14;",79
What is dynamic polymorphism?,This is a mechanism that allows different objects to use methods with the same name (method overriding).,Mechanism where the same method name can be used to perform different actions (overloading).,This is a mechanism that allows using different objects without specifying their specific type.,This is a mechanism that dynamically determines whether polymorphism is needed or not.,"Dynamic polymorphism is a mechanism that allows objects of different classes to respond to method calls with the same name but different implementations at runtime.

Dynamic polymorphism is achieved through inheritance and virtual methods. When a method is declared with the virtual keyword in the base class and overridden in a derived class using the override keyword, the method from the derived class is called at runtime, not the one from the base class, based on the type of the object on which the method is called.",80
What are Scriptable Objects in Unity3D and what are they used for?,This is a type of object that allows creating and storing data.,These are components for working with physical effects.,This is a system for creating character animations.,These are components for working with UI elements.,"Scriptable Objects in Unity3D are a special type of objects that allow creating and storing data that can be used in the project. They are classes that can contain variables and methods but do not require the presence of a GameObject in the scene.

Applications:

Storing and configuring data about characters, weapons, items, levels, and other game objects.
Managing the state and behavior of AI.
Creating systems for level generation or random events.
Saving user interface settings and animation control.",80
How can you optimize the performance of UI elements in Unity?,"Group static UI elements on one canvas, and dynamic elements on another.",Place all objects on the canvas at the origin of coordinates.,Group all UI elements on a single canvas.,Split the screen into 4 parts and create a separate canvas in each one.,"The separation into static and dynamic elements allows using different optimization approaches for each type. Static elements are processed during development, which reduces the load on the processor during gameplay. At the same time, dynamic elements are updated in real-time, providing flexibility and interactivity in the game.",81
What is Unity DOTS?,This is a stack of technologies for developing high-performance games using data-oriented principles.,"This is an extension for creating 3D points in the game, which can be used for creating effects and special visual elements.",This is a plugin for managing objects in the scene and their animations.,This is a version control and collaborative development system for games on the Unity platform.,"Unity DOTS (Data-Oriented Technology Stack) is a set of technologies and approaches provided by Unity to optimize performance and manage data in games. The main idea of DOTS is data-orientedness, which allows efficient utilization of multi-threading.

DOTS includes:

ECS (Entity Component System), Burst Compiler, Jobs System.

DOTS enables developers to create more performant and scalable games, especially on platforms with multi-threaded processors.",82
How are Coroutines different from asynchronous methods?,The coroutine is executed in the main thread. Asynchronous methods can be executed in both the main and background threads.,"Coroutines use the ""await"" keyword, while asynchronous methods use the ""yield"" keyword.",Coroutines are more efficient and faster compared to asynchronous methods.,Coroutine runs in background threads. Asynchronous methods run in the main thread.,"Coroutines in Unity run in the main thread. They use the yield mechanism to suspend and resume execution, allowing the creation of asynchronous tasks without blocking the main thread and thus avoiding frame rate slowdowns in the game.

Asynchronous methods in Unity that use the async keyword can be executed both in the main thread and in background threads, depending on the specific code being executed asynchronously.",82
Which Unity tool allows you to create and edit animations using a timeline format?,Timeline Window,Animation Window,Animator Controller,Inspector,"The Timeline Window in Unity is a tool for creating and editing complex timelines that allow you to control animations, events, sounds, and other elements in the game. It enables the creation of cinematic scenes and event sequences, as well as the management of temporal parameters of objects in the game world. The Timeline Window is often used for creating cinematic sequences, cutscenes, camera animations, and complex animation sequences.",83
"The developer executes the following C# code, which searches for all game objects with the tag ""Enemy"". However, when executing FindGameObjectsWithTag, it returns NULL despite the existence of objects with the tag ""Enemy"" in the scene. What could be the possible reason?  

GameObject[] MyEnemies = GameObject.FindGameObjectsWithTag(""Enemy"");",Objects are not active.,"Objects should contain ""Enemy"" in the name.",Objects are on the UI layer.,Objects are animated.,"The FindGameObjectsWithTag method in Unity does not find inactive objects by default due to performance optimization. By default, the search is limited to active objects in the scene to reduce the load on the CPU and memory.

If a developer wants to find inactive objects with a specific tag, they can use additional logic. For example, they can create separate lists for active and inactive objects with the given tag and then combine them into one list for further processing.",84
How are negative numbers represented in the computer's memory?,Negative numbers are represented by inverting all the bits of the positive number and adding one to the result.,"When representing negative numbers, an additional bit is used to indicate that the number is negative.","Negative numbers are represented using the decimal numeral system, but with a negative sign, for example, ""-5"".",Negative numbers are represented in computer memory using fractions that reflect their negative value.,"To obtain the binary representation of a negative number, you need to follow these steps:

1. Represent the number as a positive binary number.
2. Invert all the bits of the number (replace 0 with 1 and 1 with 0).
3. Add one to the result of the previous step.

For example, to represent -5 in 8-bit binary form:

1. Represent the positive number 5: 00000101.
2. Invert all the bits: 11111010.
3. Add one: 11111011.

Thus, -5 is represented in computer memory as an 8-bit binary number 11111011.",84
What is a closure in C#?,A closure is a function that remembers and uses the values of variables from its outer scope.,Closure - is the process of encapsulating and protecting access to variables so that they cannot be modified from other parts of the code.,Closure is a special syntax used for creating anonymous methods.,Negative numbers are represented in the computer's memory using fractions that reflect their negative value.,"Closure in C# is a function that captures and holds in memory the values of variables from the outer scope in which it was created, even after that outer scope has finished executing.

public static Func<int, int> CreateMultiplier(int factor)
{
    return x => x * factor;
}
var multiplierBy2 = CreateMultiplier(2);
var result = multiplierBy2(5);

The function CreateMultiplier creates and returns a lambda expression that multiplies the input number by the factor. Each time CreateMultiplier is called, a new closure is created, which remembers the value of the factor and uses it when calling the resulting function multiplierBy2.",85
"What is the difference between the ""finally"" and ""finalize"" keywords?","finally is used in a try-catch block, ""finalize"" is called when an object is being deleted (garbage collected).","`finally` and `finalize` are the same, but one is used with classes, and the other with methods and fields.","finally is called by the garbage collector, finalize is a block that ignores errors and is called in any case.","Finally is used to define the end of a code block, finalize forcibly terminates program execution.","""finally"" is a code block in C# that is used in conjunction with ""try"" and ""catch"" blocks to execute code that should be run regardless of whether an exception occurred or not.

""finalize"" is a method in C# that is called by the garbage collector before the object is finally removed from memory.",86
What is Normal Mapping in Unity?,The process of altering surface normals to create the illusion of additional detail.,Method for optimizing the handling of physical materials in the scene.,Mechanism for detecting collisions between objects in the game scene.,A method for optimizing the use of GPU resources during scene rendering.,"""Normal Mapping in Unity is a technique used to add additional detail and realism to the surfaces of objects without altering their geometry. It allows for visually complex and textured objects without increasing the number of polygons, which positively impacts performance.

The Normal Mapping technique is based on the use of textures called Normal Maps, which contain information about the normals (surface directions) for each pixel of the object. These normals are used to determine how light interacts with the surface, creating the illusion of bumps and indentations.""",86
Cinemachine offers tools for creating gameplay behavior. What component creates spline-based trajectories for moving objects?,Cinemachine Smooth Path,Cinemachine Target Group.,Cinemachine Free Look.,Cinemachine Brain,"The Cinemachine Smooth Path component is used to create smooth paths (trajectories) for moving objects in Unity. It allows for easily defining complex motion paths for cameras or other game objects using splines, which enhances animation and visual experience in the game.",87
What is Reflection in C#?,Reflection - is a mechanism that allows analyzing and modifying its structure and behavior during runtime.,Reflection - is a technology that allows a program to track and record changes in the database.,Reflection is a mechanism that automatically refactors code to improve its performance and readability.,"Reflection is the process of creating reflections on the surface of objects in three-dimensional space, taking into account the normals.","Reflection in C# is a mechanism that allows a program to analyze, extract information about types, and interact with them at runtime. With Reflection, you can access metadata of types, such as fields, properties, methods, constructors, attributes, and other type details.

Reflection enables dynamically creating instances of types, invoking their methods, setting and getting property values, analyzing and modifying the structure of types based on metadata during program execution.",88
Why does Dictionary work faster than List?,Dictionary is faster due to the use of hash tables to store data.,"Dictionary is faster because it uses a ""magic"" search algorithm that executes instantly.",Dictionaries are faster due to modern and efficient algorithms for comparing elements.,"Dictionary is faster because its elements are automatically sorted by keys, which simplifies searching.","In Dictionary, each element is stored as a key-value pair. It uses a hash table for efficient access to elements by their keys. The hash table allows performing add, remove, and search operations in constant time (O(1)), on average.

Accessing elements in List is done by index. When searching for an element in List, a linear search is required, examining each element until the desired index is found. This takes time proportional to the size of the list, which is O(n), where n is the number of elements in the list.",88
"What is a ""Graphics Pass"" in the context of the Scriptable Render Pipeline (SRP) in Unity?","A ""draw call"" is a step in the process of rendering objects on the screen.",Method for transferring data between CPU and GPU.,Mechanism for combining various assets into a single bundle.,A technology for memory management and resource optimization.,"A Graphics Pass in the context of the Scriptable Render Pipeline (SRP) in Unity is one of the stages in the process of rendering objects on the screen. SRP allows developers to have more flexible control over the rendering process by breaking it down into separate passes, each of which performs specific operations on graphics data.

Each Graphics Pass executes specific steps of data processing, such as applying shaders, setting up materials, calculating lighting, writing results to frame buffers, and so on. Each pass defines its order of operations and can be used for rendering specific types of objects or applying certain effects.",89
Which C# attribute allows running a class and its methods inside the editor in editing mode?,[ExecuteAlways],"[Range(0,10)]",[Live],[Editor],"The [ExecuteAlways] attribute is applied to methods in MonoBehaviour classes in Unity. It indicates that the method should be executed both in Editor mode and Play mode. This attribute is useful when you want a specific method to work both in the Editor and during gameplay, which can simplify game development and testing.

The main purpose of the [ExecuteAlways] attribute is to provide access to editor functions and methods during the game development process, allowing you to see the results of changes in the scene in both the editor and the game.",90
What is Scriptable Render Pipeline (SRP) in Unity and what is it used for?,This is a method of working with rendering in Unity to create custom rendering solutions.,This is a tool for managing dependencies in Unity projects.,This is a special system for managing asynchronous code in Unity.,This is a Unity component that allows creating complex animations.,"Scriptable Render Pipeline (SRP) is a new approach to rendering in Unity that allows developers to create custom rendering solutions. It provides flexibility and control over the rendering process, enabling performance optimization and achieving high-quality visual effects.

The application of SRP is particularly relevant for large projects that require a high degree of optimization and scalability. It also simplifies development for different platforms since you can create separate rendering solutions for mobile devices, desktops, and consoles.",90
What is the difference between Lambda and Expression in C#?,Lambda - a compact syntax for anonymous functions. Expression - an object model for representing the logical structure of expressions.,Lambda - for creating functions with a fixed set of parameters. Expression allows working with a variable number of parameters.,"Lambda is used for functional programming, while Expression is used for object-oriented programming.",Lambda and Expression are two different ways of creating anonymous functions in C#.,"Lambda is a shortened and compact form of writing anonymous functions in C#. They allow creating functions ""on the fly"" without explicitly defining the function name.
Func<int, int, int> addNumbers = (x, y) => x + y;
Expression is part of the Expression Tree system in C#. They allow representing expression logic as an object model, making them available for dynamic modification and execution during program runtime.
ParameterExpression x = Expression.Parameter(typeof(int), ""x"");
ParameterExpression y = Expression.Parameter(typeof(int), ""y"");
BinaryExpression sum = Expression.Add(x, y);",91
What is Jobs System in Unity?,This is a system for managing tasks in the background and optimizing performance.,This is a system for creating and managing the work of developers in Unity.,This is a component that allows you to control the process of resource loading in the game.,This is a technology for creating and managing various tasks in the Unity editor.,The Jobs System in Unity is a system for performing parallel computations on multi-core processors. It allows distributing computational tasks among multiple threads to increase performance and enhance the efficiency of the application.,92
The search field in the project window can filter the display of assets using text commands. Which command will display only textures?,"T:texture stands for ""Texture.""", T:mesh, T:scripts,Show textures,"For the Unity search window, there are several commands that allow filtering the display of assets:

""t:Type"" - displays assets of the specified type. For example, ""t:Prefab"" will show only prefabs.
""l:Label"" - displays assets with the specified label.
""b:BuildSettings"" - displays assets related to build settings.
""d:Script"" - displays scripts.
""n:Name"" - displays assets whose names contain the specified text.
""p:Package"" - displays assets from the specified package.
""a:AnimationClip"" - displays animation clips.
""s:Shader"" - displays shaders.",92
What is Shadow mapping in Unity?,Technique for visualizing shadows of objects in the scene.,Shadow-casting collision detection method.,Algorithm for optimizing rendering with shadows.,A method for controlling light and its interaction with objects.,Shadow mapping in Unity is a technique used to generate shadows in 3D scenes. It is used to achieve the visual effect of projecting shadows from a light source onto objects in the scene. It is applied to achieve realism in visualization since shadows play a crucial role in perceiving the volume and depth of the surrounding world.,93
What is Light Probe Proxy Volume (LPPV) in Unity?,This is a Unity component used to control lighting and scattered light in dynamic scenes.,This is a special type of collider that allows objects to interact with surrounding light probes.,This is a tool for creating photorealistic reflections on objects.,This is a Unity function that allows creating and controlling the animation of light sources.,"Light Probe Proxy Volume (LPPV) in Unity is a component used to enhance the lighting quality in scenes with dynamic objects and moving characters.

LPPV allows reducing the number of light probes used in the scene while maintaining high lighting quality. It is used for performance optimization and reducing the load on the graphics processor.

LPPV enables smooth transitions between different lighting zones and enhances the realism of rendered scenes. This component is particularly useful for large and complex scenes with diverse light sources.",94
What is Post-Processing Stack in Unity?,This is a post-processing stack used to add various camera effects. ,This is a tool for creating post-processing audio effects in the game.,"This is a technology for creating and configuring physical effects, such as explosions and smoke.",This is a system for creating and managing artificial lighting in the game.,"Post-Processing Stack в Unity is a package of tools designed for adding and configuring post-processing effects to the graphics in a game. It allows applying various effects after the rendering process, such as color correction, blur, depth of field, and others, to enhance the visual perception of the game.",94
What is occlusion culling in Unity and how does it improve performance?,This is a method of optimizing the rendering of objects behind the scenes that are not visible from the current camera.,This is an animation optimization method in Unity.,This is a Unity component for working with artificial intelligence.,This is a tool for creating custom shaders in Unity.,"Occlusion Culling в Unity is a rendering optimization technique that allows excluding objects from rendering if they are occluded by other objects and not visible from the current camera.

The result of applying occlusion culling is a reduction in the number of rendered objects, which reduces CPU and GPU overhead, as well as increases frame rates and overall project performance. This is especially relevant for large scenes with many complex objects, such as in 3D games or simulations.",95
Unity automatically attaches the SkinnedMeshRenderer component to some meshes when they are added to the scene. Why does this happen?,The mesh file contains bones and skeletal animation.,The game object has an animator component.,Object - a character controlled by the player.,The mesh file contains a humanoid character.,"SkinnedMeshRenderer is a component in Unity used for displaying and animating 3D models that have skeletal animation. It is used for rendering skinned meshes.

A skinned mesh is a 3D model composed of vertices that are linked to bones using weights. The bones form a skeleton, and each vertex can be attached to one or multiple bones. The weights determine how much each vertex will move along with its corresponding bone. This allows for creating realistic and flexible animations for characters, animals, and other skinned objects.",96
What is IK (Inverse Kinematics) in Unity?,This is a technique for creating realistic animation of object movements in the scene.,This is a component that allows creating and controlling particle systems in the game.,This is an alternative method of visualizing game objects using special materials.,This is an algorithm for optimizing the handling of physical materials in the game.,"Inverse Kinematics in Unity is a methodology for modeling the motion of objects in such a way that the desired position and orientation of a specific point (or points) on the object are achieved by changing the parameters of the joints or articulations of the model. The main idea of inverse kinematics is to determine the angle values required to reach the desired position and orientation, based on the known position and orientation of the end points of the object.",96
What is Addressable Assets System in Unity?,This is a system for organizing and managing resources that allows them to be dynamically loaded in the project.,This is a Unity component for working with a database.,This is a system for packaging resources into a single file to simplify their distribution.,This is a tool for working with the file system and paths in Unity.,"With the Addressable Assets System, developers can create addressable resources that have unique identifiers (addresses).
Key features of AAS:
Dynamic loading: Resources can be loaded and unloaded as needed.
Flexibility: Resource addresses can be changed and updated without modifying the code.
Automatic memory management: AAS automatically handles unloading of unused resources.
Localization: Resources can be easily localized by replacing addressable assets with corresponding localized versions.
Version management: AAS provides the ability to manage resource versions.",97
What is Burst Compiler?,This is a technology for generating highly efficient native code from C# methods to improve performance.,This is a tool for creating visual effects and shaders in Unity.,This is a plugin that allows developers to share their projects and resources with other teams in Unity.,This is a tool for quickly creating complex animations and transitions between object states in Unity.,"The Burst Compiler is a technology in Unity that enables generating highly efficient native code for specific C# or C#.NET methods, particularly for use with Unity Job System. It allows optimizing computations and speeding up code execution by utilizing specialized optimizations and multi-threading capabilities.

It's important to note that the Burst Compiler cannot be used for all methods; only those that meet certain restrictions and conditions can be optimized. It is typically used in conjunction with Unity Job System and Unity DOTS to achieve high performance in game projects.",98
"What is ""deferred rendering"" and ""forward rendering"" in Unity?",Algorithms for computing lighting and applying shaders.,Various camera settings to create different effects.,Optimization methods to reduce the number of object renderings.,Mechanisms for handling collisions and object collisions.,"Forward Rendering:
For each object in the scene, a separate pass is made for all light sources and materials to generate the final image on the screen.

Deferred Rendering:
For each object in the scene, a separate pass is made to gather information about its properties.
Then, a separate pass is made to calculate the lighting based on the gathered data, reducing the number of passes compared to forward rendering.
Deferred rendering works well with a large number of light sources and objects, making it preferable for large and complex scenes.
On the other hand, forward rendering is simple and efficient for small scenes and devices with limited capabilities.",98

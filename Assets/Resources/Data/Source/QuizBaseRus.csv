Text,Answers0,Answers1,Answers2,Answers3,Explanation,Difficulty
Зачем нужна консоль в Unity?,"Отображение ошибок, ворнингов и логов.",Просмотр и редактирование текстовых файлов.,Загрузка пакетов и ассетов.,Выполнение инструкций командной строки,Консоль в Unity - это инструмент для отображения сообщений и вывода информации о работе приложения во время его выполнения. Она играет важную роль в процессе разработки и отладки игр и приложений.,1
Что такое префабы (Prefabs) в Unity3D?,"Это объекты, которые можно использовать для создания копий в сцене.",Это готовые 3D модели для использования на сцене.,Это скрипты для управления игровым процессом.,Это компоненты для работы с физикой объектов.,"Префабы (Prefabs) в Unity3D представляют собой шаблоны объектов, которые можно создавать, настраивать и использовать множество раз на сцене. Они позволяют создавать однотипные объекты с одним и тем же набором компонентов, свойств и настроек.

Когда вы создаете префаб, он становится своеобразным ""макетом"" объекта, и его экземпляры на сцене будут отображаться так же, как исходный префаб, с возможностью внесения индивидуальных изменений для каждого экземпляра.",2
Какие данные в себе хранит меш?,"Меш хранит данные о атрибутах, определяющих внешний вид объекта.",Меш хранит информацию о координатах объекта в игровом пространстве.,Меш хранит данные о характеристиках процессора и оперативной памяти компьютера для оптимизации производительности.,Меш хранит данные о пользовательском вводе и управлении для обработки действий игрока в игровом движке.,"Меш определяет форму и внешний вид объекта, включая его вершины, грани, текстурные координаты и другие атрибуты. 
Вершины (Vertices): Меш содержит список вершин, которые определяют позицию точек в трехмерном пространстве. 
Грани (Faces): Меш определяет грани, которые соединяют вершины и определяют форму объекта. Грани могут быть треугольниками, четырехугольниками или полигонами более сложной формы.
Нормали (Normals): Нормали указывают направление поверхности в каждой вершине и используются для расчета освещения и отражения света от объекта.
Текстурные координаты (Texture Coordinates): Меш может содержать текстурные координаты, которые связывают вершины с соответствующими точками на текстуре. ",3
Что такое метод?,Набор инструкций.,"Это объект, который содержит данные и поведение класса.","Это свойство объекта, которое хранит данные для класса.",Часть интерфейса.,"Метод - это блок кода, объединенный внутри класса в объектно-ориентированном программировании, который выполняет определенные операции или действия. Методы представляют собой функции, которые могут принимать параметры, выполнять вычисления, взаимодействовать с данными класса и возвращать результаты.

Они являются основными строительными блоками поведения классов и позволяют выполнить определенные действия над объектами данного класса. Методы определяют поведение объектов и дает возможность использовать их в коде программы, вызывая методы и передавая необходимые аргументы.",3
Что такое canvas?,"Это компонент, который используется для отображения пользовательского интерфейса.",Это библиотека для работы с графикой и изображениями в Unity.,Canvas в Unity используется для рисования текстур и спрайтов на экране.,Это панель управления настройками и настроек проекта в Unity.,"Canvas (холст) в Unity - это компонент, который используется для отображения пользовательского интерфейса (UI) на экране. Он представляет собой плоскую поверхность, на которой размещаются различные элементы UI, такие как текст, изображения, кнопки и другие интерактивные элементы.

Canvas позволяет создавать гибкий и адаптивный пользовательский интерфейс, который автоматически масштабируется и подстраивается под разные разрешения экрана и устройства.",4
Что такое ООП?,"Парадигма, которая ориентирована на описание программных систем в терминах объектов и их взаимодействия.","Методология программирования, главная цель которой сделать код максимально линейным.","Технология, позволяющая взаимодействовать с цифровыми системами на естественных языках.","Способ организации кода, в котором все операции выполняются последовательно, без использования абстракций.","ООП, или объектно-ориентированное программирование, это методология программирования, которая ориентирована на организацию кода в виде объектов, которые представляют реальные сущности или абстракции. В объектно-ориентированном программировании данные и функции, которые с ними связаны, объединяются в единые сущности, называемые объектами.",5
Что такое класс?,"Тип данных, определяемый пользователем.","Это объект, который содержит данные и поведение программы.","Это тип данных, который используется для хранения числовых значений.","Это функция, которая выполняет определенные действия в программе.","
Класс - это шаблон или описание, которое определяет состояние (поля) и поведение (методы) объектов в ООП. Класс является фундаментальной концепцией ООП и служит для создания объектов - экземпляров класса.

Класс определяет общие характеристики для группы объектов, которые будут созданы на его основе. Он объединяет данные (поля) и операции (методы), которые связаны с определенной сущностью, и определяет поведение и свойства, которыми обладают объекты этого класса.",5
Зачем нужен аниматор?,"Позволяет создавать и управлять различными анимациями, переходами и параметрами.",Предназначен для создания и редактирования 3D моделей.,Предоставляет инструменты для работы с физическими эффектами и симуляциями.,Позволяет создавать мультфильмы в Unity.,"Аниматор в Unity - это компонент, который позволяет создавать и управлять анимациями объектов на сцене. 
Некоторые из основных возможностей:
Создание анимаций с использованием графического редактора Animator Controller.
Управление параметрами анимаций для плавного перехода между состояниями анимации.
Применение анимаций к различным состояниям объектов (например, покой, движение, атака и т. д.).
Синхронизация анимаций с другими компонентами и событиями в игре.
Создание анимаций с помощью скриптов, чтобы обеспечить динамичные и реагирующие на действия игроков анимации.",6
Какой компонент Unity3D используется для воспроизведения звуковых эффектов?,Audio Source,Camera,Light,Particle System,"Для воспроизведения звуковых эффектов в Unity3D используется компонент AudioSource. Компонент AudioSource позволяет управлять воспроизведением звуковых файлов, таких как аудио эффекты, звуки среды, музыка и т.д.

Вы можете добавить компонент AudioSource к любому игровому объекту, который будет играть звуковой эффект, и настроить его свойства, такие как аудио-файл для воспроизведения, громкость, позицию в пространстве и т.д. Кроме того, AudioSource имеет методы для управления воспроизведением, такие как Play() для начала воспроизведения, Pause() для паузы, Stop() для остановки и т.д.",7
Какой компонент Unity3D используется для отображения текста на сцене?,Text Mesh Pro,Light,Collider,Particle System,"Text Mesh Pro (TMP) - это пакет и компонент для работы с текстом в Unity, предоставляющий богатый набор возможностей и улучшений по сравнению с стандартным компонентом Text. Он разработан и поддерживается компанией Unity Technologies.",7
Что такое суперкласс?,"Класс, явлющийся родительским, от которого наследуют другие.","Класс, который произведен от нескольких подклассов одновременно.","Класс, который не может иметь своего собственного кода и может только наследовать код из других классов.","Класс, который используется только в статических контекстах программы.","Суперкласс (также называемый родительским классом или базовым классом) в объектно-ориентированном программировании представляет собой класс, от которого произошел другой класс, называемый подклассом или дочерним классом.

При наследовании, класс-потомок (подкласс) наследует атрибуты и методы класса-предка (суперкласса) и может добавлять свои собственные атрибуты и методы. В этом смысле суперкласс предоставляет общий набор функциональности, который может быть переиспользован в нескольких подклассах, способствуя повторному использованию кода и поддержке принципов абстракции и инкапсуляции.",8
Что такое MonoBehaviour? ,"Это базовый класс в Unity, который позволяет создавать и прикреплять компоненты к игровым объектам.","Это компонент, который отвечает за создание физических объектов в игре.",Это среда разработки для создания пользовательского интерфейса в Unity.,"Это базовый класс, который предоставляет доступ к базовым математическим операциям в Unity.","MonoBehaviour - это базовый класс в Unity, который позволяет создавать компоненты, взаимодействующие с объектами на сцене. Класс MonoBehaviour предоставляет возможность добавлять поведение к игровым объектам, таким как персонажи, предметы, камеры, и т.д.

При создании скриптов в Unity, они должны быть унаследованы от MonoBehaviour. Это позволяет использовать различные методы MonoBehaviour, такие как Start(), Update(), FixedUpdate(), и другие, которые автоматически вызываются движком Unity в определенные моменты жизненного цикла объекта.",9
Какой компонент Unity3D позволяет объектам взаимодействовать с другими объектами на сцене через коллизии и триггеры?,Collider,Mesh Renderer,Camera,Light,"Collider - это базовый компонент, который позволяет определить границы и форму объекта для обнаружения столкновений с другими объектами. Collider не обрабатывает логику столкновений, а просто определяет области, которые могут взаимодействовать с другими коллайдерами.",9
Что в иерархии используется для организации игровых объектов в группы?,Empty objects,Canvas, Event systems,Mesh renderers,"Occlusion map (карта заслонения) - это текстурная карта, которая используется для определения видимости объектов на сцене относительно источника света или камеры. 

Основное предназначение occlusion map состоит в том, чтобы определить, какие пиксели объектов находятся в тени или скрыты другими объектами на сцене. Это позволяет исключить ненужные пиксели из процесса освещения и рендеринга, что увеличивает производительность и позволяет создавать более реалистичные и детализированные сцены.",10
Что такое конструктор?,"Особый метод с именем класса, который запускается при инициализации класса.","Это специальный метод, который вызывается в классе для завершения работы программы.","Это метод, который вызывается в классе во время компиляции.","Особый метод, который используется для передачи данных между различными классами.","Конструктор - это специальный метод в классе, который вызывается автоматически при создании объекта данного класса. 

Основная задача конструктора - обеспечить корректное инициализацию объекта перед его использованием. Он позволяет задать значения полям класса и выполнить другие настройки, чтобы объект был готов к работе сразу после создания.

В языке C#, имя конструктора совпадает с именем класса. Конструктор может быть перегружен, что означает, что в классе может быть несколько конструкторов с разными параметрами. ",11
Какой метод в MonoBehaviour вызывается при активации объекта на сцене?,OnEnable,OnStart,OnActivate,OnAttach,"Метод OnEnable() - это метод в Unity, который вызывается каждый раз, когда компонент становится активным на сцене. Он выполняется после метода Awake() при активации объекта или после включения компонента в объекте.",11
Что такое объект в ООП?, Это экземпляр класса.,"Это свойство класса, которое хранит данные для последующего использования.","Это принцип программирования, который гласит, что каждый класс должен иметь только один объект.",Это значение.,"Объект - это экземпляр класса в ООП. Класс определяет структуру и поведение объектов, а объект представляет конкретный экземпляр этого класса, обладающий уникальным состоянием и поведением.

Класс - это шаблон или описание, которое определяет свойства (поля) и методы (функции), которыми обладает объект данного класса. Он является абстракцией, определяющей общие характеристики для группы объектов.

Объект - это конкретное воплощение класса со своими уникальными значениями свойств и поведением.",12
Что такое обработка исключений?,Механизм перехвата и обработки ошибок для избежания прекращения работы или падения программы.,Механизм уведомления пользователя о проблемах в программе.,Механизм экстренного прекращения работы программы в случае перехвата ошибок.,Механизм для игнорирования ошибок выполнения программы.,"Обработка исключений - это механизм, который позволяет обрабатывать и управлять ошибками и исключительными ситуациями в программе. Когда возникает исключение, это сигнализирует о нестандартной ситуации или ошибке, которая может повлиять на нормальное выполнение программы.

Вместо того чтобы допустить аварийное завершение программы при возникновении исключения, обработка исключений позволяет перехватить и обработать ошибку, предпринять соответствующие действия или продолжить выполнение программы с учетом возникшей ситуации.",13
Какой из следующих компонентов Unity3D используется для работы с физикой и столкновениями объектов?,Rigidbody,Transform,Audio Listener, Mesh Renderer,"Компонент Unity3D, который используется для работы с физикой и столкновениями объектов, называется ""Rigidbody"". Rigidbody добавляется к объектам, чтобы имитировать физическое поведение, такое как гравитация, столкновения и взаимодействия с другими объектами в сцене.",13
"При создании ресурсов, таких как меши для Unity, какую единицу измерения рекомендуется использовать?",Метры,Футы,Кубиты,Дюймы,Основной единицей измерения в Unity является метр (meter). Все размеры и координаты объектов в сцене задаются в метрах.,14
Для чего нужны нормали?,"Нормали указывают на направление поверхности и используются для определения, как свет будет взаимодействовать с объектом.",Нормали используются для определения глубины и плотности объекта в трехмерном пространстве.,"Нормали служат для управления физическими свойствами объекта, такими как его масса и трение.",Нормали используются для определения аудио-эффектов и звуковых свойств объекта.,"Нормали в трехмерной графике используются для определения направления поверхности в каждой вершине меша. Они используются для расчета освещения объектов. Освещение зависит от угла между нормалями поверхности и направлением источника света. Это позволяет создавать реалистичные эффекты светотени и отражений на поверхностях объектов. Нормали также используются для расчета теней. По мере движения источника света, нормали помогают определить, какие части объекта должны находиться в тени, а какие - на свету.

Еще нормали могут быть использованы для расчета столкновений и коллизий объектов. 
",15
Какой компонент Unity3D отвечает за управление анимациями объектов на сцене?,Animator,Rigidbody,Collider,Audio Source,"Компонент Unity3D, который отвечает за управление анимациями объектов на сцене, называется ""Animator"". Он используется для создания и управления состояниями анимации, а также для переходов между ними на основе определенных условий или параметров. С помощью компонента Animator можно создавать сложные анимационные контроллеры и управлять движениями и поведением объектов в игре.",15
В чем разница между ошибкой и исключением?,"Ошибка - дефект в программе.
Исключение - событие,которое возникает в результате ошибки.","Ошибки - это специальные объекты, которые создаются в программе для обработки исключительных ситуаций.","Ошибки возникают только во время выполнения программы, а исключения - только во время компиляции.",Ошибки и исключения - это синонимы и используются взаимозаменяемо в программировании.,"Ошибки - это непредвиденные проблемы в программе, которые приводят к сбою, в то время как исключения - это специальные сигналы о нестандартных ситуациях, которые можно перехватить и обработать в программе для устранения проблемы без аварийного завершения программы.",16
Какой метод в MonoBehaviour вызывается перед уничтожением объекта на сцене?,OnDestroy,OnDisable,OnAwake,OnDelete,"Метод OnDestroy в MonoBehaviour вызывается перед уничтожением объекта на сцене. Этот метод предоставляет возможность выполнить дополнительные действия или освободить ресурсы, связанные с объектом, перед тем, как он будет удален из памяти.",17
Что делает свойство IsKinematic на компоненте Rigidbody?,"Оно отключает физические взаимодействия на объект, позволяя производить преобразования только вручную из кода.","Оно убирает гравитацию объекта, но сохраняет все другие силы.","Снимает с объекта все физические силы, кроме гравитации.","Он преобразует объект в физические силы, которые воздействуют на другие объекты.","Свойство IsKinematic на компоненте Rigidbody в Unity указывает, будет ли объект подвержен физическому взаимодействию с другими объектами в сцене. Когда значение IsKinematic установлено в true, объект не будет реагировать на силы и столкновения, вызванные физическим движением других объектов или гравитацией.

Таким образом, объект с включенным IsKinematic будет двигаться и взаимодействовать с окружающей средой только с помощью своего кода или анимаций, а не с помощью стандартной физической системы Unity. Это может быть полезно, когда нужно контролировать движение объекта сцены напрямую, без влияния на него физических сил.",17
Какой компонент Unity3D используется для отображения 3D моделей на сцене?,Mesh Renderer,Light,Collider,Camera,"Компонент Mesh Renderer отвечает за отрисовку графической информации, представленной в виде меша (3D модели), на экране. Он работает в сочетании с компонентом Mesh Filter, который содержит собственно меш (3D модель), а также с материалами (Materials), определяющими внешний вид объекта.

Компонент Mesh Renderer содержит параметры, такие как материалы, настройки освещения, смещение и масштабирование текстур и другие параметры, позволяющие управлять внешним видом отображаемых 3D объектов.",18
Что означает модификатор virtual?,"Модификатор virtual указывает, что метод может быть переопределен.","Модификатор virtual указывает, что метод является абстрактным и требует реализации в каждом производном классе.","Модификатор virtual указывает, что метод может быть вызван только из других методов в том же классе.","Модификатор virtual указывает, что метод доступен только в пределах текущего класса и не может быть наследован.","Когда метод объявлен с модификатором virtual, он может быть переопределен (или замещен) в производных классах с помощью модификатора override. Это позволяет производным классам предоставлять свою собственную реализацию метода, замещая реализацию из базового класса.",19
Где доступны члены с модификатором public?,"Из любого места программы, включая другие классы и пространства имен.",Только внутри того же проекта (сборки).,Внутри того же класса и его производных классов (наследников).,"Только внутри того же класса, в котором они объявлены.","Члены с модификатором public доступны из любого места программы, включая другие классы и пространства имен. Это означает, что из любого кода, включая код в других классах, объектах или даже в других сборках (проектах), можно обращаться к публичным членам класса.",19
Какое отличие deltaTime и fixedDeltaTime?,"deltaTime это время между кадрами, а fixedDeltaTime это фиксированное значение из настроек.",deltaTime и fixedDeltaTime всегда имеют одинаковое значение во время выполнения игры.,"deltaTime это время между кадрами, а fixedDeltaTime это количество кадров за одну секунду.","deltaTime является статическим свойством класса Time в Unity, а fixedDeltaTime нет.","deltaTime представляет собой время (в секундах) между текущим и предыдущим кадрами. deltaTime может изменяться в зависимости от производительности системы, поэтому движение объектов может быть разным на разных устройствах.
fixedDeltaTime представляет собой фиксированное значение времени между кадрами, которое задается в настройках проекта.fixedDeltaTime не меняется во время выполнения игры и обеспечивает стабильность физических эффектов и симуляций на разных устройствах.",20
"Какое свойство компонента Rigidbody определяет, будет ли объект подвержен гравитации?", useGravity,mass, isKinematic,velocity,"Свойство компонента Rigidbody, которое определяет гравитацию, называется ""useGravity"".

Если значение свойства ""useGravity"" установлено в ""true"", объект будет подвержен гравитации и будет свободно падать под воздействием силы тяжести. Если значение установлено в ""false"", объект будет игнорировать гравитацию и не будет падать.",21
"Какой компонент Unity3D используется для работы с пользовательским вводом, таким как клавиатура и мышь?",Input,Collider,Rigidbody,Animator,"Input предоставляет статические методы для определения состояния клавиш клавиатуры, кнопок мыши и других устройств ввода. С помощью этого компонента вы можете обрабатывать ввод пользователя и реагировать на действия, такие как нажатие клавиш, перемещение мыши, события сенсорных экранов и др.",21
Что представляет собой компонент NavMeshAgent в Unity3D?,Компонент для управления навигацией и перемещением объектов.,Компонент для управления освещением на сцене.,Компонент для работы с физическими эффектами.,Компонент для создания и управления анимациями персонажей.,"Компонент NavMeshAgent в Unity3D представляет собой навигационный агент, который используется для управления движением объектов по навигационной сетке (NavMesh). Навигационная сетка представляет собой пространство, разбитое на маленькие ячейки, в которых определены доступные для движения области.

Когда объекту добавляется компонент NavMeshAgent, он становится способным автоматически перемещаться по навигационной сетке, следуя определенным путям к заданным точкам. Это позволяет реализовать автоматическое управление движением персонажей или других объектов в игре.",22
Что такое var в C#?,"Ключевое слово, которое используется для объявления переменных с неявным типом.","Ключевое слово, которое используется для объявления переменной без инициализации.","Используется для создания переменных, содержащих только числовые значения.","Ключевое слово, которое указывает на переменную с динамическим типом данных.","В C#, ключевое слово var используется для объявления переменной без явного указания её типа. Вместо того, чтобы явно указывать тип переменной, компилятор C# самостоятельно определяет тип переменной на основе выражения, с которым переменная инициализируется.
var number = 10;
var name = ""John"";
var isValid = true;
Использование var упрощает и укорачивает код, особенно в случаях, когда тип переменной очевиден из контекста инициализации. Ключевое слово var особенно полезно при работе с анонимными типами, LINQ-запросами или сложными типами данных, когда точное указание типа может быть громоздким и неудобным.",23
Что такое модификаторы доступа?,"Ключевые слова, определяющие уровень видимости и доступности членов класса.","Это особые ключевые слова, которые позволяют изменять цвет и шрифт текста в коде, делая его более удобочитаемым.","Это специальные инструкции, которые позволяют включать и отключать определенные функции в коде.","Это специальные методы, которые используются для обработки исключений в программе.","Модификаторы доступа в языке программирования определяют уровень видимости и доступности членов класса . 
public: Члены с модификатором public доступны из любого места программы, включая другие классы и пространства имен.
private: Члены с модификатором private доступны только внутри того же класса, в котором они объявлены. 
protected: Члены с модификатором protected доступны внутри того же класса и его производных классов. 
internal: Члены с модификатором internal доступны внутри того же проекта (сборки). Они не видны из других проектов.",23
Какой компонент Unity3D используется для управления движением персонажа в игре?,Character Controller,Collider,Light,Particle System,"Character Controller в Unity - это компонент, который предоставляет простой способ управления движением персонажа в 3D пространстве. Он обеспечивает базовое управление персонажем без использования физического движения Rigidbody, что делает его более подходящим для управления персонажами от первого или третьего лица, особенно в играх с ограниченным движением, например, в платформерах или RPG.

Character Controller предоставляет методы для перемещения персонажа по поверхности, обработки столкновений с препятствиями и управления гравитацией.",24
Что такое draw call?,"Draw call  - это команда, отправляемая графическому процессору для отображения определенного объекта или группы объектов.","Draw call - это событие, которое происходит, когда игровой движок обновляет позиции и повороты объектов на экране.","Draw call - это специальный графический эффект, который придает трехмерным объектам в играх объемность и глубину.","Draw call - это процесс загрузки графических ресурсов, таких как текстуры и модели, в память компьютера.","Draw call (также известный как отрисовка, вызов отрисовки) - это операция, при которой графический движок или API (например, Unity, DirectX, OpenGL) рисует геометрию или объекты на экране. Draw call представляет собой команду, отправляемую процессору видеокарты для отрисовки графических элементов, таких как вершины, индексы, текстуры, материалы и шейдеры.

Каждый draw call является отдельным запросом к видеокарте для отображения определенной графической информации. ",25
Что такое слои (layers) в Unity3D?,Это способ разделения сложной сцены на отдельные части для управления отображением.,Это функция для группировки объектов на сцене.,Это компонент для управления источниками света.,"Это текстура, применяемая к объектам на сцене.","В Unity3D слои (layers) представляют собой механизм, который позволяет классифицировать и группировать объекты на сцене. Каждый объект в Unity может быть помещен на один из 32 доступных слоев. Это позволяет управлять поведением объектов в зависимости от их слоя, осуществлять проверки столкновений с определенными слоями и управлять видимостью объектов на сцене.",25
Какой визуальный эффект удаляют ортографические камеры?,Перспективу,Гамма-коррекцию цвета,Глубину резкости,Сияние ,"Ортографическая камера в Unity - это тип камеры, который создает изометрическое или ортографическое проектирование сцены. В отличие от перспективной камеры, ортографическая камера не создает перспективное искажение и не учитывает расстояние до объектов. Все объекты на сцене отображаются в одинаковом масштабе, что делает этот тип камеры часто используемым для 2D игр или для создания изометрических проекций в 3D сценах.",26
Что такое partial классы?,Partial-классы позволяют разделить определение класса между несколькими файлами.,Partial классы могут быть унаследованы только один раз и не могут быть расширены другими классами.,"Partial классы позволяют объявлять статические методы и свойства, недоступные для экземпляров класса.",Partial классы используются для создания объектов с переменным числом свойств и методов.,"Partial классы в C# позволяют определить класс в нескольких отдельных файлах. Каждый файл содержит часть определения класса, помеченную ключевым словом partial. Все эти части объединяются компилятором в один класс при компиляции.
Файл1: 
public partial class MyClass
{
    public void Method1()
}
Файл2: 
public partial class MyClass
{
    public void Method2()
}",27
Что такое сборка мусора (GC)?,"Это автоматический процесс управления памятью, который отслеживает и удаляет объекты, которые больше не используются.",Это автоматический процесс удаления мусора из системного диска для освобождения места.,"Это процесс очистки памяти ОЗУ от данных, не используемых в данный момент программой.",Это процесс удаления неиспользуемых переменных из программы.,"Сборка мусора (Garbage Collection, GC) - это автоматический процесс управления памятью в программах, который отслеживает и удаляет объекты, которые больше не используются и стали недоступны для программы.

В языках программирования с автоматическим управлением памятью, таких как C# или Java, программисту не требуется явно освобождать память, выделенную для объектов. Вместо этого сборщик мусора отслеживает, какие объекты не имеют ссылок на них из программы, и периодически освобождает память, занятую этими объектами.

Сборка мусора позволяет избежать утечек памяти и упрощает процесс управления памятью.",27
Что такое API?,"API - это набор правил и инструкций, определяющих, как различные компоненты могут взаимодействовать друг с другом.","API - это методика шифрования данных, используемая для обеспечения безопасности в сети Интернет.",API - это метод разработки автоматических систем для создания сложных систем веб-сайтов.,API - это устройство для подключения к компьютеру и ввода команд с помощью голоса.,"API (Application Programming Interface) - это набор правил и протоколов, которые определяют, как различные компоненты программного обеспечения взаимодействуют друг с другом. Он предоставляет набор функций, процедур, классов и структур, которые программисты могут использовать для создания приложений или интеграции различных систем.
Примером API может быть OpenWeatherMap API, где мы можем использовать API-ключ и отправить запрос для получения данных о погоде. Результатом будет ответ в формате JSON или XML с информацией о погоде для заданного города или местоположения.",28
Что такое Boxing/Unboxing в C#?,Boxing и Unboxing - это процессы преобразования значимых типов данных в ссылочные типы и обратно. ,"Boxing и Unboxing - это специальные методы, используемые для сериализации и десериализации объектов в C#.","Boxing и Unboxing - это механизмы, которые позволяют создавать анонимные типы и работать с ними в C#.",Boxing и Unboxing - это способы управления памятью и освобождения ресурсов в C#.,"Boxing - это процесс преобразования значимого типа данных в экземпляр объекта соответствующего ссылочного типа. При упаковке (boxing) значение переменной копируется в новый объект-контейнер на куче, а переменная становится ссылкой на этот объект. 
int number = 42;
object boxedNumber = number;
Unboxing - это процесс извлечения значения из упакованного объекта и преобразования его обратно в исходный значимый тип данных. При распаковке (unboxing) значение извлекается из объекта-контейнера и преобразуется в исходный тип данных.
object boxedNumber = 42;
int number = (int)boxedNumber;
",29
"
Что такое дженерики?","Дженерики - это механизм, позволяющий создавать обобщенные типы, методы и классы.","Дженерики - это способ использования методов, которые автоматически определяют типы данных во время выполнения программы.",Дженерики - это механизм для работы с текстовыми данными.,"Дженерики - это набор заранее определенных обобщенных классов и методов, которые можно использовать в языке C#.","Дженерики (Generics) в C# представляют механизм, который позволяет создавать обобщенные типы, классы и методы, которые могут работать с различными типами данных. Это позволяет повторно использовать код и обеспечивает безопасность типов на этапе компиляции.
public static void Swap<T>(ref T a, ref T b)
{
    T temp = a;
    a = b;
    b = temp;
}
В данном примере метод Swap является обобщенным, так как определен с параметром типа T. ",29
Где доступны члены с модификатором private?,"Только внутри того же класса, в котором они объявлены.",Внутри того же проекта (сборки).,Внутри того же класса и его производных классов (наследников).,"Из любого места программы, включая другие классы и пространства имен.","Члены с модификатором private доступны только внутри того же класса, в котором они объявлены. Это означает, что члены с модификатором private недоступны из других классов, даже если эти классы находятся в той же сборке.",30
Зачем нужны отдельные Update и FixedUpdate?,"Update используют, где важна зависимость от времени, FixedUpdate - где важна независимость от FPS.","Update предназначен для физических расчетов, а FixedUpdate - для анимации и пользовательского ввода.",Update работает в отдельном потоке от FixedUpdate.,"Update и FixedUpdate делают одно и то же, но обрабатываются в произвольной последовательности.","Отделение логики обновления на Update и FixedUpdate помогает более точно контролировать обновление объектов. Это особенно важно для физических расчетов и других операций, которые должны происходить с постоянной частотой.
Update: вызывается на каждом кадре рендеринга и используется для обновления логики, которая зависит от времени (пользовательский ввод, движение объектов, анимации).

FixedUpdate: вызывается с фиксированной частотой(0.02 сек). Он предназначен для обработки физических расчетов и других операций, которые должны выполняться с постоянной частотой независимо от FPS игры.",31
"Чтобы вызвалось событие OnTriggerEnter при столкновении двух объектов, какие два компонента обязательно должны быть на этих объектах?",Rigidbody и Collider,Collider и MeshRenderer,Collider и MeshFilter,MeshRenderer и MeshFilter,"Компонент Rigidbody используется для добавления физических свойств объекту, позволяя ему взаимодействовать с физическим миром, подвергаться силам, гравитации и имитировать реалистичные движения.

Компонент Collider определяет границы и форму объекта, позволяя ему взаимодействовать с другими объектами через столкновения и коллизии. Collider также используется для обработки физического взаимодействия с окружающими объектами и другими физическими телами в сцене.",31
Что такое Coroutines в Unity? ,"Механизм, который позволяет создавать асинхронные операции и управлять временем выполнения задач в игре.","Механизм, позволяющий выполнять длительные операции без влияния на производительность игры.","Механизм, применяемый для асинхронной обработки пользовательского ввода.","Механизм, который используется для синхронного выполнения кода без задержек.","Coroutines в Unity - это механизм, который позволяет создавать асинхронные операции и управлять временем выполнения задач в игре. Они позволяют выполнять отложенные действия или анимации без блокировки основного потока выполнения, что облегчает выполнение сложных задач, таких как анимации, переходы между сценами и другие длительные операции.

Работа с Coroutines происходит с помощью ключевого слова yield, которое позволяет приостанавливать выполнение функции и возобновлять его позднее.",32
"В каком порядке вызываются методы жизненного цикла MonoBehaviour, начиная с инициализации объекта до его уничтожения?","Awake, Start, FixedUpdate, Update, LateUpdate, OnDestroy","Awake, Start, Update, FixedUpdate, LateUpdate, OnDestroy","Start, Awake, Update, LateUpdate, FixedUpdate, OnDestroy"," Start, Awake, FixedUpdate, LateUpdate, Update, OnDestroy","Awake() -  для инициализации переменных и компонентов объекта.
Start() - для запуска процессов, которые зависят от других объектов.
FixedUpdate() -  для работы с физикой и перемещения объектов.
Update() -   для обновления логики объекта и обработки пользовательского ввода.
LateUpdate() -  для выполнения логики, которая зависит от обновления других объектов.
OnDestroy() - вызывается перед уничтожением объекта. Используется для освобождения ресурсов и очистки памяти.",33
Что такое Cinemachine в Unity?,Это пакет инструментов для создания сложных камерных движений и управления камерами в игре. ,Это специальный редактор для создания анимированных камерных эффектов.,Это библиотека для создания трехмерных моделей и анимаций в Unity.,Это компонент для отображения анимированных эффектов на сцене.,"Cinemachine - это пакет для Unity, который предоставляет удобные инструменты для создания сложных камерных систем. Он позволяет легко настраивать и контролировать камеры в игре, добавлять эффекты переходов между камерами, управлять камерой в режиме реального времени и создавать динамические камерные треки. Cinemachine упрощает процесс создания кинематографических камерных эффектов и обеспечивает более гибкий и эффективный подход к управлению камерами в игровом проекте.",33
Какой атрибут C# отображает private переменную в инспекторе объектов?, SerializedField,Serializable, HideInInspector, Range,"Атрибут SerializedField используется в Unity для отображения и редактирования приватных или защищенных переменных в инспекторе редактора, делая их доступными для редактирования без необходимости делать их публичными. Таким образом, можно сохранить инкапсуляцию и одновременно предоставить возможность редактирования значений в инспекторе без доступа к ним извне класса.",34
Сколько по времени по умолчанию занимает FixedUpdate?,0.02 секунды,"Время зависит от сложности логики, которую вы выполняете в этом методе.",1 миллисекунду,один кадр времени (1/60 секунды на 60 FPS).,"FixedUpdate вызывается с фиксированной частотой, которая по умолчанию равна 50 раз в секунду (каждые 0.02 секунды). Однако это значение может быть изменено в настройках проекта.",35
Что такое Raycast в Unity3D и для чего он используется?,Это метод для проверки столкновения луча с объектами на сцене.,Это компонент для обработки пользовательского ввода.,Это метод для установки камеры на сцене.,Это компонент для создания луча света на сцене.,"Raycast - это метод, используемый для определения столкновений луча (ray) с объектами в сцене. Луч представляет собой виртуальный луч света, который исходит из начальной точки и направлен в определенном направлении. Raycast проверяет, пересекается ли этот луч с какими-либо коллайдерами в сцене и возвращает информацию о первом объекте, с которым происходит столкновение.",35
Что делает атрибут Range?,Ограничивает значение переменной с помощью ползунка.,Он проверяет значения переменных через виджет текстового поля.,Он ограничивает значения переменных с помощью виджета выбора цвета.,Он представляет допустимые варианты переменной в раскрывающемся списке.,"Атрибут [Range(min, max)] в Unity используется для ограничения диапазона значений числовых полей (например, float или int) в инспекторе. Он позволяет задать минимальное и максимальное значение, которое может принимать данное числовое поле.

Применение атрибута [Range] к числовому полю позволяет разработчику установить ограничение значений в инспекторе редактора Unity, чтобы предотвратить ввод недопустимых или неправильных значений для данного поля.",36
Кому доступны переменные с модификатором protected на уровне класса?,Доступны самому классу и его производным классам (наследникам) ,"Доступны только внутри класса, где они объявлены.","Доступны только в классах, находящихся в том же пространстве имен, что и класс, где они объявлены.","Доступны только в классах, находящихся в том же файле исходного кода, что и класс, где они объявлены.","Переменные с модификатором protected на уровне класса доступны самому классу, производным классам (наследникам) и любым другим классам в той же самой сборке (assembly).",37
Что делает аттрибут [Space(20)]?,Он делает отступ 20 пикселей над переменной внутри инспектора объектов.,Он вставляет 20 знаков пробела в качестве значения по умолчанию.,Он вставляет 20 пикселей слева и справа от переменной в инспекторе.,Он ограничивает количество знаков пробела в 20 символов.,"Атрибут [Space(X)] используется в Unity для добавления вертикального пространства (отступа) между сериализованными полями в инспекторе. В скобках указывается значение, которое определяет количество пикселей отступа.

Например, если у нас есть несколько сериализованных полей в MonoBehaviour-скрипте, и мы хотим добавить большой вертикальный отступ между ними в инспекторе, мы можем применить атрибут [Space(20)] перед полем, которое должно быть разделено от других.",37
"Может ли класс реализовать два интерфейса, у которых объявлены одинаковые методы?","Класс может реализовать два интерфейса с одинаковыми методами, но нужно указать принадлежность каждого метода.","Класс может реализовать два интерфейса с одинаковыми методами, но их реализация должна быть одинаковой.",При вызове метода будет использоваться реализация только первого интерфейса.,"Класс не может реализовать два интерфейса с одинаковыми методами, так как это вызывает конфликт в имени метода.","Когда класс реализует два интерфейса с одинаковыми методами, он должен явно указать, какой метод относится к какому интерфейсу, чтобы избежать неоднозначности. Это делается путем использования полной квалификации имени метода, указывающей на соответствующий интерфейс:
((IInterface1)myObj).MyMethod();   // Вызов MyMethod из IInterface1
((IInterface2)myObj).MyMethod();  // Вызов MyMethod из IInterface2",38
Что такое draw call в Unity?,"Это команда для отображения объектов на экране, которая содержит информацию о параметрах объекта. ","Это часть процесса рендеринга, которая отвечает за расчет освещения.",Это процесс обработки физического взаимодействия между объектами в Unity.,"Это способ определения, какие объекты должны быть отображены на экране.","Draw call (отрисовка) в Unity - это процесс отправки графических команд на отрисовку объектов на экране. Каждый раз, когда Unity отрисовывает объекты на сцене, он генерирует draw call для каждого объекта или набора объектов с одинаковыми материалами и настройками отображения.

Draw call содержит информацию о том, какой объект отрисовать, какой материал использовать, его позицию, поворот и масштаб, а также другие настройки, такие как режимы смешивания, отключение или включение затенения, маскировка и т. д.",39
"Что делает этот код:
Float Answer = Random.value * 10f;",Выбирает случайное значение между 0 и 10,Выбирает случайное значение больше 10,Выбирает случайное значение меньше 10,Выбирает случайное значение кратное 10,"Random.value возвращает случайное значение с плавающей точкой в диапазоне от 0.0 (включительно) до 1.0 (исключительно). Таким образом, это функция, которая генерирует случайное число с плавающей точкой от 0 до 1.",39
Что такое инкапсуляция (1 принцип ООП)?,Сокрытие деталей реализации объектов и предоставление интерфейса для работы с ними.,"Процесс превращения объекта в капсулу, которая может быть использована для хранения других объектов.",Способность объекта взаимодействовать только с объектами своего класса.,"Принцип, который запрещает использование публичных методов и полей в классе.","Инкапсуляция (Encapsulation) - это первый принцип ООП, который заключается в объединении данных и методов, работающих с этими данными, в единый объект (класс), и предоставлении доступа к ним только через интерфейс (публичные методы) этого объекта. Суть инкапсуляции состоит в том, что внутреннее состояние объекта остается скрытым от внешнего кода, и изменения данных объекта производятся только через установленные методы.
Главная цель инкапсуляции - обеспечить контроль над доступом к данным и методам объекта, предоставляя защищенный интерфейс для работы с объектом. ",40
Какое утверждение не соответствует действительности?,Только у гуманоидных персонажей есть кости.,"Функция обновления никогда не вызывается автоматически, пока объект не активен.",Корутины будут продолжать работать на неактивных объектах.,Все скрипты компонентов наследуются от MonoBehaviour.,"Кости (bones) обычно используются в анимации персонажей или объектов для управления их движением. В компьютерной графике и 3D-моделировании кости представляют собой невидимые точки или сущности, которые используются для создания иерархической структуры, описывающей и управляющей движением модели.",41
"Что такое графическая библиотека (OpenGL, DirectX)?","Графическая библиотека это набор инструментов и функций, для управления графикой и визуальными эффектами.","Графическая библиотека это набор физических компонентов, которые подключаются для улучшения графического вывода.",Графическая библиотека это программное обеспечение для создания и редактирования фотографий и изображений.,"Графическая библиотека это система, которая управляет размещением и отображением графических элементов на веб-сайтах.","Графическая библиотека, такая как OpenGL или DirectX, представляет собой набор программных интерфейсов и функций, которые разработчики могут использовать для создания и управления графикой в приложениях. Они обеспечивают доступ к низкоуровневым операциям рендеринга и взаимодействию с видеокартой. 
Пример: команда на C++  ""pDeviceContext->ClearRenderTargetView(pRenderTargetView, DirectX::Colors::SteelBlue);""  указывает устройству DirectX очистить буфер заднего фона и заполнить его указанным цветом перед началом отрисовки нового кадра. ",41
"В чем состоит ""Принцип единственной ответственности"" (1 принцип SOLID)?",Класс должен быть ответственным только за одну функциональность или задачу.,"Принцип требует, чтобы каждый метод в классе выполнял только одну задачу.","Класс должен выполнять одну операцию за раз, а все остальные операции должны быть отложены.",Каждый класс должен быть максимально полезным и включать как можно больше функциональности.,"Принцип единственной ответственности означает, что каждый класс должен иметь только одну причину для изменения. Иными словами, класс должен быть ответственным только за одну четко определенную функциональность или задачу.

Суть этого принципа заключается в том, чтобы разделить разные функциональности на различные классы. Это уменьшает сложность классов, делает их более понятными и улучшает поддерживаемость программного кода. Когда класс выполняет несколько независимых задач, изменения в одной задаче могут повлиять на другие, что усложняет понимание и поддержку кода.",42
Что такое Unity Package Manager (UPM)?,"Это инструмент для  установки и управления пакетами, а также их зависимостей в проекте Unity.","Это специальный компонент для создания упакованных файлов сцен, моделей и ассетов в Unity.",Это инструмент для резервного копирования и восстановления проектов Unity.,Это инструмент для обмена ресурсами и кодом между разными проектами Unity.,"Unity Package Manager (UPM) - это инструмент в Unity, который обеспечивает управление и установку пакетов, а также их зависимостей в проекте Unity. Он позволяет разработчикам легко добавлять сторонние пакеты в свои проекты, а также управлять версиями и обновлениями этих пакетов.

UPM предоставляет удобный интерфейс для поиска, установки и удаления пакетов из Unity Asset Store, репозиториев Git или локальных путей. Он также автоматически разрешает зависимости между пакетами, что позволяет легко подключать сторонние библиотеки и инструменты к проекту.",43
Что такое Procedural Generation в Unity?,"Техника для генерации контента в игре, такого как уровни, миры или текстуры.",Метод для генерации случайных чисел в игровом процессе.,Алгоритм для оптимизации работы с анимациями персонажей.,Механизм для создания случайных столкновений между объектами в сцене.,"Procedural Generation (процедурная генерация) в Unity - это метод создания контента, такого как уровни, миры, текстуры, модели, анимации и другие элементы, с использованием алгоритмов и случайных чисел, вместо традиционного ручного создания каждого элемента.

Процедурная генерация позволяет разработчикам автоматизировать и упростить процесс создания большого объема контента, что особенно полезно для создания крупных открытых миров или повторяющихся элементов в игре. ",43
"Элементы пользовательского интерфейса, такие как изображения и кнопки, могут быть зафиксированы в определенных позициях экрана для создания адаптивных интерфейсов. Какие функции Unity помогают достичь этого?","Якоря и оси(Anchors, pivots)","События и рейкасты(Events, raycasts)","Кватернионы и углы Эйлера(Quaternions, Euler angles)","Непрозрачность и прозрачность(Opacity, transparency)","Якоря (Anchors) и оси (Pivots) в Unity используются для управления расположением и масштабированием UI-элементов и спрайтов.

Якоря (Anchors): Якоря определяют, как элементы будут растягиваться и масштабироваться при изменении размеров родительского элемента или экрана. Установка якорей позволяет автоматически подстраивать элементы под разные разрешения экрана или размеры родительского контейнера.

Оси (Pivots): Оси определяют точку вокруг которой происходит вращение и масштабирование объекта. Установка осей позволяет управлять точкой вращения и масштабирования, что полезно для анимации и позиционирования объектов.",44
Где доступны члены с модификатором  protected?,Внутри того же класса и его производных классов (наследников).,Внутри того же проекта (сборки).,"Из любого места программы, включая другие классы и пространства имен.","Только внутри того же класса, в котором они объявлены.","Члены с модификатором protected доступны внутри того же класса и его производных классов (наследников), но не доступны из других классов вне иерархии наследования.",45
Какая разница между перегрузкой и переопределением методов?,"Перегрузка методов - это изменение сигнатуры метода, а переопределение методов - изменение его реализации.","Перегрузка методов - это изменение реализации метода, а переопределение методов - изменение его сигнатуры.","Перегрузка используется в статическом полиморфизме, а переопределение методов - только в динамическом.","Перегрузка методов используется для изменения видимости метода, а переопределение - для изменения доступности."," Перегрузка методов относится к созданию нескольких методов с одним и тем же именем, но с разными параметрами. Переопределение методов происходит, когда производный класс изменяет реализацию метода, унаследованного от базового класса.",45
Что такое абстракция (4 принцип ООП)?,"Представление объектов программы в упрощенной форме, отделяя важные характеристики от ненужных деталей.",Это возможность использовать абстрактные классы для создания объектов.,Это возможность использовать абстрактные поля и методы в классе.,"Это принцип ООП, который требует, чтобы все классы в программе были абстрактными.","Абстракция (Abstraction) - принцип ООП, который заключается в представлении объектов программы в упрощенной форме, скрывая детали реализации и выделяя только существенные характеристики и функциональность.

Основная цель абстракции состоит в том, чтобы предоставить понятный и удобный интерфейс для взаимодействия с объектами, скрывая сложные детали и делая код более понятным и удобочитаемым. Абстракция позволяет абстрагироваться от внутренних деталей реализации и сосредоточиться на важных аспектах объекта.",46
Какой метод в MonoBehaviour вызывается каждый раз перед отрисовкой кадра и используется для обновления графических элементов?,Update,OnRenderObject,FixedUpdate,Start,"Метод Update() в классе MonoBehaviour вызывается каждый раз перед отрисовкой кадра. Он используется для обновления графических элементов и других компонентов игровых объектов. В Update() можно выполнять логику обновления, перемещения, анимации и других действий, которые должны происходить на каждом кадре игры.",47
Когда стоит использовать StringBuilder вместо string?,"StringBuilder используют, когда нужно часто конкатенировать или модифицировать строки.","Это одно и то же, string - сокращенная записть от StringBuilder.","StringBuilder следует использовать, когда вам нужно выполнить операции форматирования строки.","StringBuilder применяется только в случае, если вы хотите работать с небольшими строками.","String является неизменяемым типом данных, что означает, что после создания строки ее нельзя изменить. Все операции над строками, такие как конкатенация или замена символов, фактически создают новые строки в памяти. 
В то время как StringBuilder является изменяемым типом данных, который позволяет изменять содержимое строки без создания новых объектов. Внутреннее представление StringBuilder в C# базируется на массиве символов (char[]). ",47
Что такое наследование (2 принцип ООП)?,"Возможность создания новых классов на основе существующих, наследуя их свойства и методы.",Возможность создания объектов из абстрактных классов.,Возможность класса включать в себя все свойства и методы другого класса.,"Это принцип, который позволяет классам наследовать только статические методы.","Наследование (Inheritance) - позволяет создавать новые классы на основе существующих (родительских) классов, наследуя их свойства и методы.
Принцип наследования позволяет повторно использовать код, который уже был реализован в базовом классе, что способствует уменьшению дублирования кода и улучшает структурированность программы. При этом производный класс может добавлять свою уникальную функциональность или переопределять поведение методов базового класса.",48
С помощью какой арифметической операции можно комбинировать кватернионы?,Умножение,Деление,Сложение,Вычитание,"Для комбинирования кватернионов в Unity используется операция умножения (*).

Например, если у нас есть два кватерниона quat1 и quat2, мы можем комбинировать их следующим образом:
Quaternion combinedQuaternion = quat1 * quat2;",49
Чем принципиально отличается фреймворк от библиотеки?,Фреймворк предоставляет архитектуру и правила разработки. Библиотека - набор утилит и функций для решения конкретных задач.,Фреймворк  предоставляет низкоуровневую функциональность. Библитека - высокоуровневую.,Фреймворк это набор утилит и инструментов. Библиотека - набор функций.,Фреймворк - это набор шаблонов проектирования. Библиотека - это набор различной документации проекта. ,"Библиотека - это набор предварительно написанного кода, который используется для упрощения задач. Библиотеки заточены на узкие цели. Напримет Zenject, Newtonsoft.Json, Unity UI. 

Фреймворк - это полный набор низкоуровневых библиотек, который позволяет пользователю создавать приложения. Он управляет всеми вызовами библиотеки и, отвечает за поток функций. Фреймворк подобен фундаменту, на котором разработчики создают приложения для определённых платформ. Пример фреймворков: Cinemachine, ProBuilder, Unity Input System. Сама Unity является фреймворком.

Мы в коде используем библиотеку, фреймворк использует наш код. 
",49
Неявное приведение типа это:,int i = 10; double d = i;,double d = 10.5; int i = (int)d;,"string str = ""10""; int i = int.Parse(str);",double d = 10.5; int i = Convert.ToInt32(d);,"Неявное приведение типа (implicit type casting) в C# - это автоматическая операция преобразования значения из одного типа в другой без явного указания со стороны разработчика. В случае неявного приведения типа, компилятор самостоятельно выполняет преобразование, если оно безопасно и не приведет к потере данных или искажению значения.",50
Наследуются ли переменные с модификатором private при наследовании класса?,Нет.,"Да, они доступны в производном классе.","Могут быть унаследованы только в случае, если производный класс объявлен в том же файле, что и базовый класс.",Возможно только при использовании специального ключевого слова inherit.,"Модификатор private делает переменные доступными только в пределах того класса, в котором они объявлены, и не позволяет их доступ к другим классам, включая производные классы.

Когда класс наследует другой класс, он может получить доступ только к публичным и защищенным (protected) членам базового класса. Приватные (private) переменные, методы или другие члены класса остаются недоступными для наследующего класса.",51
Что такое ECS?,"Парадигма разработки ПО, разделяющая сущности, компоненты и системы.","Это группа инициалов известных личностей, работающих в игровой индустрии.","Это язык программирования, разработанный для работы с квантовыми компьютерами.","Это сокращение для ""Eternal Creative System"", философия о творческом подходе в работе.","ECS (Entity-Component-System) - это парадигма разработки программного обеспечения, широко используемая в разработке компьютерных игр. ECS представляет собой архитектурный подход, который помогает разделить логику и данные компонентов, улучшая производительность и упрощая разработку сложных систем.

Основные компоненты ECS:

Entity (сущность): Представляет игровой объект или объект в системе. 

Component (компонент): Компоненты - это контейнеры для данных, представляющих конкретные аспекты сущности.

System (система): Системы обрабатывают компоненты сущностей и реализуют логику игры или поведения.",52
Что делает функция Destroy?,Удаляет указанный игровой объект после текущего цикла обновления.,"Удаляет указанный игровой объект, когда приложение завершит работу.",Немедленно удаляет указанный игровой объект.,Немедленно деактивирует указанный игровой объект.,"Функция Destroy в Unity используется для уничтожения объектов во время выполнения игры.

Когда вызывается метод Destroy, он помечает объект для уничтожения. Однако само уничтожение объекта происходит не сразу, а в конце текущего кадра или на следующем кадре. Это означает, что объект продолжит существовать и выполнять свои методы до окончания текущего кадра, и только после этого будет удален из сцены и из памяти.
 Destroy(objectToDestroy);",52
Что такое конечная переменная?,Переменная-константа с ключевым словом readonly.,Переменная с ключевым словом final.,"Переменная, которая может быть объявлена только с конкретным типом данных.","Переменная, которая может быть объявлена без  инициализации.","Конечная переменная (final variable) - это переменная, значение которой не может быть изменено после ее инициализации. В других языках программирования такая переменная может называться ""константой"" или ""immutable переменной"".

В языке C#, ключевое слово для создания конечных переменных - readonly. После объявления и инициализации конечной переменной в конструкторе или при объявлении, ее значение не может быть изменено в дальнейшем. Это позволяет обеспечить безопасность и надежность программы, так как гарантируется, что значение переменной останется неизменным после инициализации.",53
Что такое Unity Collab и для чего он используется?,Это инструмент совместной разработки и управления версиями.,Это компонент для работы с коллизиями и столкновениями объектов на сцене.,Это фреймворк для создания многопользовательских игр.,Это социальная сеть разработчиков Unity3D.,"Unity Collab (ранее известный как Unity Teams) - это инструмент совместной разработки и управления версиями, предоставляемый Unity Technologies. Он используется для упрощения совместной работы над проектами в Unity3D, облегчения управления изменениями и версиями проекта, а также для обеспечения более безопасной и устойчивой разработки.

Основные функциональности:
управление версиями,
совместная разработка,
контроль доступа,
облачное хранилище.",54
Каким образом можно загрузить новый уровень в Unity3D?,С помощью метода LoadScene,Изменением значения переменной level в коде,Копированием файла с уровнем в папку Assets,"Нажатием кнопки ""New Level"" на панели инструментов","Метод SceneManager.LoadScene()  позволяет загрузить новый уровень из сцены. Вы можете передать ему имя или индекс уровня, который нужно загрузить. 
// Загрузить уровень с именем ""Level2""
SceneManager.LoadScene(""Level2"");",54
Какой метод MonoBehaviour выполняется по умолчанию в режиме редактора (Editor mode)?,Reset,OnBecameInvisible,OnAnimatorMove,OnTriggerEnter,"Метод Reset — это метод MonoBehaviour, который по умолчанию запускается в режиме редактора. Этот метод вызывается, когда скрипт прикрепляется к GameObject или сбрасывается в Инспекторе. Он позволяет инициализировать или сбрасывать значения переменных в скрипте, обеспечивая согласованное начальное состояние при работе в редакторе Unity.",55
В чем различие между классом и структурой?,"Классы поддерживают наследование, структуры нет. Объекты класса передаются по ссылке, структуры - по значению.","Классы могут содержать методы, а структуры - только поля.","Классы нужно инициализировать с помощью ключевого слова ""new"", структуры не нужно.","Классы наследуют другие классы, а структуры только другие структуры.","Классы поддерживают наследование. Структуры не поддерживают. Объекты класса передаются по ссылке, изменения, внесенные в один объект, могут повлиять на другие объекты, которые ссылаются на тот же экземпляр. Структуры передаются по значению, каждый экземпляр структуры содержит свою собственную копию данных.
Объекты класса хранятся в куче (heap). Структуры хранятся в стеке (stack) или в куче.
Поля класса могут иметь значение ""null"", если они не инициализированы. Поля структуры всегда должны иметь значение.
В общем случае, работа со структурами может быть более эффективной по производительности.",56
Когда автоматически вызывается метод Reset?,При добавлении компонента к объекту или сбросе его значений в режиме редактирования.,Когда игровой объект перемещается из одной сцены в другую.,Когда сцена стартует или перезапускается.,Когда сцена стартует или перезапускается для деактивированного игрового объекта.,"Метод Reset() автоматически вызывается в Unity для компонентов, когда они добавляются на объект или сбрасываются в значения по умолчанию. Это происходит в следующих случаях:

При добавлении компонента на объект в сцене или в префабе.
При сбросе компонента до значений по умолчанию, что можно сделать через контекстное меню компонента или кнопку ""Reset"" в инспекторе компонента.",56
Явное приведение типа это:,double d = 10.5; int i = (int)d;,int i = 10; double d = i;,"string str = ""10""; int i = int.Parse(str);",double d = 10.5; int i = Convert.ToInt32(d);,"Явное приведение типа (explicit type casting) в C# - это операция, которая позволяет явно изменить тип значения из одного типа в другой. При явном приведении типа разработчик явно указывает, что хочет преобразовать значение из одного типа в другой, даже если такое преобразование потенциально может привести к потере данных или искажению значения.

Явное приведение типа выполняется с помощью оператора приведения (type)expression, где type - тип, в который нужно привести значение, а expression - выражение, которое нужно привести к указанному типу.",57
"В чем состоит ""Принцип открытости/закрытости"" (2 принцип SOLID)?","Классы и модули должны быть открыты для расширения, но закрыты для модификации.",Изменение метода в классе не должно влиять на другие методы в том же классе.,"Классы должны быть открыты для изменений, чтобы обеспечить легкость модификации кода.","Все методы в классе должны быть открыты для переопределения в наследниках, а поля - закрыты.","Принцип открытости/закрытости из SOLID заключается в следующем:
""Программные сущности (классы, модули, функции и т.д.) должны быть открыты для расширения, но закрыты для модификации.""
Это означает, что код должен быть написан таким образом, чтобы добавление новой функциональности не требовало изменения уже существующего кода. Новые возможности должны добавляться через расширение, используя наследование, интерфейсы, композицию и другие техники, не нарушая работу существующих компонентов.",58
Что такое полиморфизм (3 принцип ООП)?,Возможность объектов одного класса использоваться как объекты другого класса с помощью общего интерфейса.,Это возможность создания объектов разных классов из одного абстрактного класса.,Способность объектов взаимодействовать только с объектами своего типа.,Возможность использовать один и тот же объект для разных целей в программе.,"В основе полиморфизма лежит идея, что объекты, имеющие общий интерфейс (например, общие методы), могут быть использованы согласно этому интерфейсу, независимо от их фактического типа. Это позволяет передавать объекты производных классов туда, где ожидается объект базового класса, и вызывать методы наследников, не зная их конкретного типа.",58
В каком формате сохраняет аудиоданные класс Microphone?,Audio clip asset,MP3 file,WAV file,OGG file,"Класс Microphone используется для доступа к микрофону компьютера или мобильного устройства и записи аудио с него. Он позволяет разработчикам создавать приложения, которые могут взаимодействовать с микрофоном, записывать звук, а также анализировать или воспроизводить аудиоданные в реальном времени. Это может быть полезно для создания голосового управления, аудио-игр или аудиоанализа в приложениях и играх.",59
Некоторые типы материалов включают в себя карты нормалей. Зачем нужна карта нормалей?,"Она создает детализацию поверхности на меше: неровности, вмятины и царапины.","Это система детализации, которая постепенно уменьшает количество полигонов по мере того, как камера удаляется.",Она заменяет геометрию для создания высокополигональных объектов.,Она программно уменьшает количество полигонов в мешах.,"Карта нормалей (Normal Map) в компьютерной графике используется для придания плоским или низкополигональным моделям визуального впечатления детализации и объемности. Она является одним из важных типов текстурных карт, используемых в рендеринге 3D-моделей.

В игровой разработке и визуализации карта нормалей позволяет обмануть взгляд зрителя, создавая эффект высокодетализированной поверхности, не добавляя фактически новых полигонов. Вместо этого она использует специальные цветовые данные, которые кодируют информацию о направлении нормалей поверхности каждого пикселя.",60
Что такое Zenject?,Это фреймворк для внедрения зависимостей.,"Это алгоритм сжатия данных, используемый для уменьшения размера файлов в Unity.",Это инструмент для создания сложных математических вычислений и алгоритмов в Unity.,Это библиотека для работы с звуками и аудиоэффектами в Unity.,"Zenject - это фреймворк для управления зависимостями и инъекции зависимостей (Dependency Injection, DI) в Unity. Он предоставляет удобные инструменты для организации структуры проекта и управления зависимостями между компонентами.",60
Какие из нижеперечисленных методов предназначены для создания или удаления объектов в Unity?,Instantiate() и Destroy(),Start() и FixedUpdate(),Update() и LateUpdate(),OnEnable() и OnDisable(),"Instantiate(): Метод принимает параметром префаб (Prefab) - шаблон объекта, который нужно создать, и  дополнительные параметры, такие как позиция и поворот и создает новый экземпляр объекта.

Destroy(): Этот метод используется для удаления игрового объекта со сцены во время игры. Он принимает в качестве параметра ссылку на удаляемый объект и уничтожает его, освобождая память и ресурсы, которые он занимал.",61
Где доступны члены с модификатором  internal?,Внутри того же проекта (сборки).,"Из любого места программы, включая другие классы и пространства имен.",Внутри того же класса и его производных классов (наследников).,"Только внутри того же класса, в котором они объявлены.","internal - это уровень доступа, который ограничивает доступ к членам класса только внутри той сборки, в которой они объявлены. Сборка - это единица компиляции, которая может представлять собой одну библиотеку, исполняемый файл или модуль. Если член класса объявлен с модификатором internal, он может быть использован в любом другом классе, находящемся в той же сборке, но будет недоступен для классов вне этой сборки.",62
Кому нужна функция Collaborate в Unity Teams?,"Членам команды для сохранения, обмена и синхронизации проектов Unity.","Разработчикам, которые вносят изменения в исходный код Unity.","Компаниям, которые собирают деньги на проекты через краудфандинг.",Разработчики используют как систему контроля версий.,"Функция Collaborate в Unity Teams нужна командам разработчиков, чтобы сохранять, совместно использовать и синхронизировать проекты Unity. Это обеспечивает более эффективную работу над проектами в команде, обмен файлами, контроль версий и совместное внесение изменений в проекты.",62
Зачем компонент PlayableDirector?,Управлять воспроизведением временной шкалы в сцене.,Записать игровой сеанс в видеофайл.,Переключаться между различными камерами сцены.,Параллельно запускать несколько функций на разных игровых объектах.,"Компонент PlayableDirector в Unity используется для управления временем и воспроизведения Timeline - это визуальной системы анимации, которая позволяет создавать сложные и интерактивные анимации событий в игре или приложении.

PlayableDirector позволяет проигрывать, останавливать, приостанавливать и переключать Timeline во время выполнения приложения. Это удобно для создания сценариев и кинематографичных моментов, так как вы можете контролировать события и анимацию объектов на сцене через таймлайн и скрипты.",63
Что такое куча и стек?,"Стек - это область памяти, используемая для хранения локальных переменных, а куча - это область динамической памяти для хранения объектов.","Стек - это место, где хранятся объекты и данные, а куча - это область памяти, используемая для выполнения арифметических операций.","Стек - это область памяти, где хранятся данные времени выполнения программы, а куча - место, где хранятся инструкции и код программы.","Стек - это область памяти, где хранятся структуры данных, а куча - это место, где хранятся функции и методы программы.","Куча (heap) и стек (stack) - это две основные области памяти, используемые в программировании, включая C#.

Стек (stack) - это область памяти, где хранятся локальные переменные методов, параметры методов, а также контекст вызова функций. Стек управляется автоматически и используется для хранения данных в порядке ""последний вошел - первый вышел"".
Куча (heap) - это область динамической памяти, где хранятся объекты и данные, которые создаются и управляются во время выполнения программы. В отличие от стека, размер кучи не фиксирован и может изменяться во время выполнения. ",64
"В чем состоит ""Принцип подстановки Барбары Лисков"" (3 принцип SOLID)?",Объекты базовых классов должны быть заменяемыми объектами производных классов.,Производный класс должен быть наследником только одного базового класса.,Все методы базового класса были переопределены в производных классах.,"Классы не могут быть изменены после их создания, чтобы обеспечить их стабильность.","Принцип подстановки Барбары Лисков:
""Объекты базовых классов должны быть заменяемыми объектами своих производных классов, и это не должно влиять на правильность программы.""

Предположим, у нас есть класс Bird с методом Fly(), и от него производные классы Penguin и Sparrow. По принципу LSP, мы должны быть уверены, что вызов метода Fly() на объектах Bird не вызовет ошибок или неожиданных поведений для классов Penguin и Sparrow. Может быть разумно переопределить метод Fly() для Penguin, чтобы он не делал ничего (так как пингвины не летают), но это не должно нарушать работу других частей программы, которые ожидают объекты типа Bird.",64
Что такое статический полиморфизм?,"Механизм, при котором одно и то же имя метода может использоваться для выполнения различных действий(перегрузка).","Механизм, позволяющий создавать новые методы во время выполнения программы.",Используется для выполнения разных действий в зависимости от значения переменной.,"Механизм, обеспечивающий динамическое связывание вызовов методов.","Статический полиморфизм (также известный как перегрузка или компиляционный полиморфизм) - это механизм в программировании, при котором одно и то же имя метода или оператора может использоваться для выполнения различных действий в зависимости от типов аргументов, переданных в метод.

Статический полиморфизм разрешается во время компиляции программы, и компилятор определяет, какой именно метод или оператор должен быть вызван на основе типов аргументов, используемых в вызове функции. Это позволяет перегружать методы или операторы с различными типами параметров и обрабатывать их соответствующим образом.",65
Что такое batching в Unity?,"Это механизм, который позволяет объединить несколько объектов или графических элементов в один draw call.",Это процесс взаимодействия объектов с разными материалами для создания новых эффектов в игре.,"Это техника, которая используется для управления пакетами данных в Unity.",Это метод оптимизации текстур и уровней детализации для улучшения графики в Unity.,"Batching (объединение) в Unity - это процесс, при котором несколько графических элементов объединяются в один, чтобы уменьшить количество draw call и улучшить производительность игры.
Batching помогает оптимизировать производительность игры, особенно при работе с большим количеством объектов на сцене. Однако не все объекты могут быть объединены, и оптимизация требует соблюдения определенных ограничений и правил.",66
Какое утверждение лучше всего описывает функцию Quaternion.Euler?,"Преобразует ориентацию, измеренную в градусах, в кватернион.","Преобразует кватернион в строку, которая хранит его вращение по осям X, Y и Z в градусах.",Преобразует ориентацию из радиан в кватернион.,Он преобразует кватернион в Vector3.,"Метод Quaternion.Euler(x, y, z) в Unity используется для создания кватерниона, представляющего поворот вокруг осей X, Y и Z.

Он принимает три значения в градусах: x, y и z, и возвращает кватернион, который представляет соответствующий поворот. Этот метод удобен для создания кватернионов, когда углы поворота заданы в удобном для разработчика формате в градусах.",66
"Что подразумевается под ""управлением зависимостями""?","Это процесс установления, передачи и управления зависимостями между компонентами программы. ",Это способность обращаться к родительским компонентам и использовать их ресурсы.,Это процесс оценки взаимодействия между различными элементами программы и определения их важности.,Это способность программы автоматически создавать зависимости между компонентами без вмешательства программиста.,"Зависимости - это отношения между различными компонентами, модулями или объектами программы, где один элемент (называемый клиентом или потребителем) требует доступа к другому элементу (называемому сервисом или поставщиком) для выполнения своих задач.
Управление зависимостями - это процесс установления, передачи и управления зависимостями между компонентами программы. Один из способов управления зависимостями - это использование паттернов инъекции зависимостей (Dependency Injection, DI), которые позволяют создавать слабые связи между компонентами и обеспечивают более гибкую структуру программы.",67
Как получить ближайшую сверху к числу number степень двойки в С#?,"double result = Math.Pow(2, Math.Ceiling(Math.Log(number, 2)));","double result = Math.Log(number, 2);","double result = Math.Ceiling(Math.Pow(2, Math.Log(number, 2)));",double result = Math.Log(Math.Pow(Math.Ceiling(number)));,"Math.Pow(base, exponent) - функция, возводящая базу в указанный показатель степени.
Math.Ceiling(value) - функция, округляющая значение вверх до ближайшего целого числа.
Math.Log(number, base) - функция, вычисляющая натуральный логарифм числа по указанному основанию. 
То есть, сначала вычистяем логарифм числа по основанию 2, округляем вверх и возводим 2 в  полученную степень. Полезно при вычислении буферов памяти и при работе с размерами текстур.",68
Что такое асимптотическая сложность алгоритма?,Асимптотическая сложность - это оценка поведения алгоритма по мере увеличения размера входных данных.,"Асимптотическая сложность - это количество операций, выполняемых в алгоритме, независимо от размера входных данных.","Асимптотическая сложность - это точное количество шагов, необходимых для выполнения алгоритма.","Асимптотическая сложность алгоритма - это количество байтов памяти, занимаемых алгоритмом в процессе выполнения.","Асимптотическая сложность позволяет оценить, как быстро растет время выполнения или количество ресурсов, таких как память или процессорное время, потребляемых алгоритмом при увеличении размера входных данных.

Асимптотическая сложность обычно выражается с помощью ""О-большого"" (Big O) нотации. В нотации ""О-большого"" указывается верхняя граница роста алгоритма в зависимости от размера входных данных. Например, если сложность алгоритма оценивается как O(n^2), где n - размер входных данных, это означает, что время выполнения алгоритма будет расти пропорционально квадрату размера входных данных.",68
"В чем состоит ""Принцип разделения интерфейса"" (4 принцип SOLID)?","Много маленьких специализированных интерфейсов лучше, чем один общий интерфейс.",Интерфейс должен содержать как можно больше методов для упрощения кода.,"Каждый интерфейс должны быть реализован одним классом, чтобы избежать дублирования кода.",Все классы должны реализовывать общий интерфейс с обязательными методами.,"Принцип разделения интерфейса:
""Много маленьких специализированных интерфейсов лучше, чем один общий интерфейс.""
Суть этого принципа состоит в том, чтобы разделять большие и сложные интерфейсы на много маленьких и специализированных таким образом, чтобы клиенты могли реализовывать только те методы, которые им действительно необходимы, а не быть принужденными реализовывать лишние методы.",69
Чем абстрактный класс отличается от интерфейса?,"Абстрактный класс может предоставлять реализацию методов и свойств, в то время как интерфейс только определяет сигнатуры.","Абстрактный класс может использоваться для создания экземпляров объектов, в то время как интерфейс не может.","Абстрактный класс может реализовывать несколько интерфейсов, а интерфейс может наследовать только один абстрактный класс.",Абстрактный класс и интерфейс предоставляют одинаковую функциональность и могут использоваться взаимозаменяемо.,"Абстрактный класс может предоставлять реализацию методов и свойств, в то время как интерфейс только определяет сигнатуры методов и свойств, но не предоставляет их реализацию. 
Класс может наследовать только один абстрактный класс, но реализовывать множество интерфейсов. 
Абстрактный класс может предоставлять общую функциональность для классов-наследников и определять базовую структуру и поведение. Интерфейсы определяют только контракты, которые класс должен реализовать, но не предоставляют общей реализации.
Абстрактный класс может быть расширен путем добавления новых методов, свойств и полей, в то время как интерфейс, как правило, не подвержен изменениям, чтобы не нарушать существующие контракты.",70
От чего наследуется MonoBehaviour? ,от класса Behaviour,от класса Class,от класса Object,от класса Component,MonoBehaviour наследуется от класса Behaviour. Класс Behaviour в свою очередь наследуется от класса Component. Component является базовым классом для всех компонентов в Unity.,70
Что такое перегрузка операторов?,Это возможность определить новое поведение операторов для пользовательских типов данных.,Это возможность менять порядок выполнения операций прямо во время выполнения программы.,"Это возможность создавать новые операторы, не связанные с уже существующими.","Это конструкция с  ключевым словом overload, позволяющая выполнять оператор несколько раз подряд.","Перегрузка операторов - это механизм, который позволяет определить специальное поведение операторов при работе с объектами пользовательских классов. Это позволяет использовать стандартные операторы, такие как +, -, *, /, ==, !=, и другие, для объектов пользовательских классов, а также определить свою логику для их работы.
    // Перегрузка оператора сложения
    public static Point operator +(Point p1, Point p2)
    {
        return new Point(p1.X + p2.X, p1.Y + p2.Y);
    }",71
Что такое переполнение стека (stack overflow)?,"Это ситуация, когда стек памяти заполняется больше, чем его максимальная емкость.","Это ошибка, при попытке присвоить значение переменной, которое выходит за пределы диапазона этой переменной.","Это ситуация, когда программе не хватает оперативной памяти для выполнения задач.","Это ошибка, возникающая при попытке доступа к несуществующей памяти или объекту в программе.","Переполнение стека (stack overflow) - это ситуация, когда стек памяти, используемый для хранения локальных переменных, параметров методов и контекста вызова функций, заполняется больше, чем его максимальная емкость. 

Переполнение стека обычно происходит, когда рекурсивная функция вызывает саму себя или когда вложенные функции вызываются слишком глубоко и не освобождаются из стека вовремя. 

При переполнении стека обычно возникает исключение ""StackOverflowException"", которое приводит к прекращению работы программы или аварийному завершению. ",72
Что такое Animation Rigging в Unity?,"Это система для создания и управления сложными анимациями с помощью управляемых костей и контролов.





",Это метод для управления положением объектов в сцене с помощью уравнений кинематики.,Это технология для создания и управления светом в сцене.,Это система для оптимизации и управления ресурсами в проекте.,"Animation Rigging в Unity - это набор инструментов и система, которая позволяет создавать сложные анимации персонажей и объектов с использованием программных контроллеров и управлять костями и мешами для достижения более реалистичных и уникальных движений. Это позволяет аниматорам и разработчикам создавать более динамичные и интересные анимации, а также упрощает процесс анимирования сложных объектов и персонажей.",72
Можно ли хранить разные типы данных в C# в объекте класса System.Array?,"Хранение разных типов данных в массиве возможно, но в виде объектов.",Хранение разных типов данных в массиве приводит к потере точности и ошибкам при доступе к элементам.,System.Array автоматически преобразует все элементы в единый тип данных.,"Нет, в массиве можно хранить только однородные элементы одного типа данных.","System.Array является базовым классом для всех массивов в C# и позволяет хранить элементы различных типов в единственном массиве.
Array myArray = new object[5];
myArray[0] = ""Привет"";
myArray[1] = 10;
myArray[2] = true;
myArray[3] = 3.14;
myArray[4] = DateTime.Now;
Однако, при работе с System.Array следует учитывать, что элементы хранятся в виде объектов, и при доступе к ним может потребоваться явное приведение типа обратно к исходному типу для использования конкретных функций или свойств. ",73
"В чем состоит ""Принцип инверсии зависимостей"" (5 принцип SOLID)?",Высокоуровневые модули не должны зависеть от низкоуровневых модулей. Оба типа модулей должны зависеть от абстракций.,"Высокоуровневые модули должны зависеть от низкоуровневых модулей, абстракции должны зависеть от деталей.","Классы должны зависеть только от конкретных реализаций, а не от абстракций.","Классы должны быть написаны так, чтобы они не могли изменить свое поведение во время выполнения.","Принцип инверсии зависимостей:
Высокоуровневые модули не должны зависеть от низкоуровневых модулей. Оба типа модулей должны зависеть от абстракций.
Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.
Предположим, у нас есть класс OrderProcessor, который зависит от класса DatabaseConnection для доступа к базе данных. Если мы хотим использовать другой источник данных, нам придется изменить класс OrderProcessor. Вместо этого, мы можем ввести абстракцию, например, интерфейс IDatabaseConnection, и сделать OrderProcessor зависимым только от этого интерфейса. Теперь мы можем легко заменить DatabaseConnection другой реализацией, не затрагивая OrderProcessor.",74
Для чего обычно используется событие OnAnimatorMove в объектах MonoBehaviour?,Для перехвата и обработки обновлений позиции и вращения анимированного объекта.,Для воспроизведения анимации после ее завершения.,Для синхронизации анимации объекта с текущим временем.,Для обнаружения любого движения объекта.,"Событие OnAnimatorMove в объектах MonoBehaviour обычно используется для перехвата и обработки обновлений позиции и вращения объекта, которые были применены аниматором в кадре. Это позволяет программисту влиять на движение объекта, учитывая анимацию, и добавлять дополнительную логику, связанную с движением и анимацией, в скрипты объекта.",74
Какой фрагмент кода C# постоянно обновляет ось Y?,"transform.Rotate(Vector3.right, RotSpeed * Time.deltaTime);","transform.localRotation *= Quaternion.Euler(0f, RotSpeed * Time.deltaTime, 0f);","transform.RotateAround(Vector3.up, RotSpeed * Time.deltaTime);",transform.SetParent(null);,Метод transform.Rotate в Unity используется для вращения игрового объекта в трехмерном пространстве. Он позволяет изменить ориентацию объекта относительно его текущего положения.,75
Как yield используется в итераторах?,"yield используется для определения значений, которые должны быть возвращены при каждой итерации.",yield используется для объявления переменных в итераторах.,yield используется для создания делегатов и событий в C#.,yield используется для определения начала выполнения каждой итерации.,"В итераторах yield используется для определения значений, которые должны быть возвращены при каждой итерации. Когда исполнение доходит до инструкции yield return, значение возвращается из итератора, а выполнение приостанавливается. 
public static IEnumerable<int> GetNumbers()
    {
        yield return 1;
        yield return 2;
        yield return 3;
        yield return 4;
        yield return 5;
    }",76
Что такое Assets Bundle?,"Пакет, содержащий один или несколько файлов ресурсов.","Специальная папка, содержащая скрипты и ресурсы.","Устаревший и не используемый в Unity способ управления ресурсами, замененный другими методами.",Формат файлов для хранения компилированных скриптов в Unity.,"Assets Bundle (пакет ресурсов) в Unity - это специальный файл, который содержит один или несколько ресурсов (таких как текстуры, модели, аудио, видео и другие) упакованных в одну единицу. Эти пакеты могут быть созданы и загружены в игре динамически, что позволяет управлять ресурсами более эффективно.
Assets Bundle предоставляют разработчикам более гибкий и эффективный способ управления ресурсами в Unity, что особенно важно для мобильных платформ и игр с большим объемом контента.",76
Что такое Shader Graph в Unity?,"Это визуальный графический инструмент, который позволяет создавать шейдеры без необходимости писать код. ","Это плагин для Unity, который позволяет экспортировать графические эффекты.","Это компонент в Unity, который позволяет создавать динамические визуальные эффекты для объектов на сцене.","Это система в Unity, которая отвечает за управление физической симуляцией объектов.","Shader Graph в Unity - это визуальный графический инструмент, который позволяет создавать шейдеры (материалы) для объектов на сцене без необходимости писать код. Он предоставляет интерфейс для создания комплексных шейдеров с помощью соединения готовых блоков, представляющих различные шейдерные функции и операции.",77
"Игровой объект пули быстро перемещается по сцене с помощью компонента RigidBody. Иногда он проходит сквозь твердые объекты, даже когда у них есть коллайдер. Как это исправить?",Изменить свойство Collision Detection Rigidbody на Continuous Dynamic или Continuous Speculative.,Включить свойство Rigidbody IsKinematic.,"Увеличить значение Fixed Time Step в диалоговом окне Project Settings, чтобы изменить частоту события FixedUpdate.","Надо увеличить размер коллайдеров, чтобы более эффективно обнаруживать столкновения.","У Collision Detection, отвечающий за обнаружение столкновений есть несколько параметров:
Discrete: Значение по умолчанию. Столкновения обрабатываются на основе расчетов за каждый кадр. Это подходит для большинства объектов.
Continuous: Используется непрерывная обработка столкновений. Это позволяет предотвратить проникновение объектов друг в друга при высоких скоростях. Однако этот режим затратен с точки зрения производительности.
Continuous Dynamic: Этот режим комбинирует преимущества дискретной и непрерывной обработки столкновений.
Continuous Speculative: Это расширение режима Continuous, которое делает предположения о будущем положении объекта на основе его скорости.",78
Что такое Lerp в Unity ?,"Lerp - это метод, который позволяет плавно перемещаться между двумя значениями.","Lerp - это аббревиатура от ""Lighting Effects Render Pipeline"", специальной технологии для улучшения рендера света.","Lerp - это тип материала, применяемый к объектам для изменения их физических свойств, таких как упругость или трение.","Lerp - это специальный вид игровых персонажей, которые перемещаются по заданной траектории на экране.","В Unity Lerp (Linear Interpolation) является функцией, предоставляемой внутри фреймворка Unity для выполнения линейной интерполяции между двумя значениями в рамках временной оси. Функция Lerp в Unity может использоваться для плавного перемещения объектов, изменения их размера, изменения цвета или прозрачности, а также для создания анимации между двумя значениями.

В Unity функция Lerp использует следующий синтаксис:
Vector3.Lerp(start, end, t);
start и end - начальное и конечное значения, между которыми выполняется интерполяция.
t - весовой коэффициент (время), находящийся в диапазоне от 0 до 1. ",78
Что такое Nullable-тип в C#?,"Специальный тип данных, который позволяет переменной принимать значение null.","Позволяет переменной иметь только значение ""null"" и никакое другое.","Представляет специальный тип данных, который может изменять свой тип во время выполнения программы.",Позволяет переменной иметь несколько значений одновременно.,"Nullable-тип в C# представляет возможность для переменной иметь дополнительное значение ""null"" в дополнение к её основному типу данных. Обычные типы данных в C#, такие как int, bool, double и другие, не могут содержать значение ""null"". Однако, если мы хотим, чтобы переменная могла принимать значение ""null"", мы можем использовать Nullable-тип. Nullable-тип создается путем добавления символа ""?"" после основного типа данных. Например, int? означает Nullable-тип для целочисленного значения.
int? nullableInt = null;
bool? nullableBool = true;
double? nullableDouble = 3.14;",79
Что такое динамический полиморфизм?,"Это механизм, позволяющий использовать разным объектам методы с одинаковым именем (переопределение методов).","Механизм, при котором одно и то же имя метода может использоваться для выполнения различных действий(перегрузка).","Это механизм, позволяющий использовать разные объекты без указания их конретного типа.","Это механизм, позволяющий динамичестки  определять, нужен ли полиморфизм или нет.","Динамический полиморфизм - это механизм, который позволяет объектам различных классов реагировать на вызовы методов с одинаковыми именами, но с разной реализацией, во время выполнения программы.

Динамический полиморфизм достигается через наследование и виртуальные методы. Когда метод объявлен с ключевым словом virtual в базовом классе и переопределен (override) в производном классе с использованием ключевого слова override, во время выполнения вызывается метод из производного класса, а не базового класса, в соответствии с типом объекта, на котором вызывается метод.",80
Что такое Scriptable Objects в Unity3D и для чего они используются?,"Это тип объектов, который позволяет создавать и хранить данные.",Это компоненты для работы с физическими эффектами.,Это система для создания анимаций персонажей.,Это компоненты для работы с UI элементами.,"Scriptable Objects в Unity3D - это особый тип объектов, который позволяет создавать и хранить данные, которые можно использовать в проекте. Они представляют собой классы, которые могут содержать переменные и методы, но не требуют наличия GameObject в сцене.
Применение:
Хранение и настройка данных о персонажах, оружии, предметах, уровнях и других игровых объектах.
Управление состоянием и поведением AI.
Создание систем для генерации уровней или случайных событий.
Сохранение настроек пользовательского интерфейса и управления анимациями.",80
Как можно оптимизировать работу UI элементов в Unity?,"Сгруппировать статические UI на одном канвасе, а динамические элементы — на другом.",Расположить все объекты на канвасе в начале координат.,Сгруппировать абсолютно все UI элементы на одном канвасе.,"Разделить экран на 4 части, в каждой создать отдельный канвас.","Разделение на статические и динамические элементы позволяет использовать различные подходы к оптимизации для каждого типа. Статические элементы обрабатываются на этапе разработки, что снижает нагрузку на процессор во время игры. В то же время, динамические элементы обновляются в реальном времени, что обеспечивает гибкость и интерактивность в игре.",81
Что такое Unity DOTS ?,"Это стек технологий, для разработки высокоэффективных игр с использованием принципов ориентированных на данные.","это расширение для создания трехмерных точек в игре, которые могут быть использованы для создания эффектов и специальных визуальных элементов.",Это плагин для управления объектами в сцене и их анимациями.,Это система управления версиями и совместной разработки игр на платформе Unity.,"Unity DOTS (Data-Oriented Technology Stack) - это набор технологий и подходов, предоставляемых Unity для оптимизации производительности и управления данными в играх. Основной идеей DOTS является ориентированность на данные, что позволяет эффективно использовать многопоточность.

DOTS включает в себя:

ECS (Entity Component System), Burst Compiler, Jobs System.

DOTS позволяет разработчикам создавать более производительные и масштабируемые игры, особенно на платформах с многопоточными процессорами. ",82
Чем корутины отличаются от асинхронных методов?,"Корутина выполняется в основном потоке. Асинхронные методы могут выполняться как в основном, так и в фоновых потоках.","Корутины используют ключевое слово await, а асинхронные методы используют ключевое слово yield.",Корутины более эффективны и быстрые по сравнению с асинхронными методами.,Корутина выполняется в фоновых потоках. Асинхронные методы выполняются в основном потоке.,"Корутины в Unity выполняются в основном потоке. Они используют механизм yield для приостановки и возобновления выполнения, что позволяет создавать асинхронные задачи без блокировки основного потока и, таким образом, не приводят к замедлению обновления кадров в игре.

Асинхронные методы в Unity, которые используют ключевое слово async, могут выполняться как в основном потоке, так и в фоновых потоках, в зависимости от того, какой именно код выполняется асинхронно. ",82
Какой инструмент Unity позволяет создавать и редактировать анимации в формате timeline?,Timeline Window,Animation Window,Animator Controller,Inspector,"Timeline Window (Окно временных шкал) в Unity представляет собой инструмент для создания и редактирования сложных временных линий, которые позволяют управлять анимациями, событиями, звуками и другими элементами в игре. Оно позволяет создавать кинематографические сцены и событийные последовательности, а также управлять временными параметрами объектов в игровом мире. Timeline Window часто используется для создания кинематических сценариев, вступительных роликов, анимаций камеры и комплексных анимационных последовательностей.",83
"Разработчик выполняет следующий C#-код, который ищет все игровые объекты с тегом ""Enemy"". Однако при выполнении FindGameObjectsWithTag возвращает NULL, несмотря на то, что в сцене есть объекты с тегом ""Enemy"". Какая возможная причина?
GameObject[] MyEnemies = GameObject.FindGameObjectsWithTag(""Enemy"");",Объекты не активны,"Объекты должны содержать ""Enemy"" в имени",Объекты находятся на слое UI,Объекты анимированы,"Метод FindGameObjectsWithTag в Unity не находит неактивные объекты по умолчанию из-за оптимизации производительности. По умолчанию, поиск происходит только среди активных объектов на сцене, чтобы уменьшить нагрузку на процессор и память.

Если разработчик хочет найти неактивные объекты с тегом, можно использовать дополнительную логику. Например, можно создать список активных и неактивных объектов с данным тегом и потом объединить их в один список для дальнейшей обработки. ",84
Каким образом отрицательные числа представляются в памяти компьютера?,Отрицательные числа представляются путем инвертирования всех битов положительного числа и добавления единицы к результату.,"При представлении отрицательных чисел используется дополнительный бит, указывающий, что число отрицательное.","Отрицательные числа представляются с использованием десятичной системы счисления, но с отрицательным знаком, например ""-5"".","Отрицательные числа представляются в памяти компьютера с использованием фракций, которые отражают их отрицательное значение.","Для получения двоичного отрицательного числа, необходимо выполнить следующие шаги:
Представьте число положительным числом в двоичной форме.
Инвертируйте все биты числа (замените 0 на 1 и 1 на 0).
Добавьте единицу к результату предыдущего шага.

Например, для представления -5 в 8-битном двоичном виде:
Представление положительного числа 5: 00000101.
Инверсия всех битов: 11111010.
Добавление единицы: 11111011.
Таким образом, -5 представляется в памяти компьютера как 8-битное число 11111011.",84
Что такое замыкание (closure) в C#? ,"Замыкание - это функция, которая запоминает и использует значения переменных из внешней области видимости.","Замыкание  - это процесс закрытия и защиты доступа к переменным, чтобы они не могли быть изменены из других частей кода.","Замыкание - это специальный синтаксис, который используется для создания анонимных методов.","Замыкание - это функция, которая автоматически вызывается при инициализации переменной.","Замыкание (closure) в C# - это функция, которая захватывает и удерживает в памяти значения переменных из внешней области видимости, в которой она была создана, даже после того, как эта область видимости завершила свое выполнение.

public static Func<int, int> CreateMultiplier(int factor)
{
    return x => x * factor;
}
var multiplierBy2 = CreateMultiplier(2);
var result = multiplierBy2(5);

Функция CreateMultiplier создает и возвращает лямбда-выражение, которое умножает переданное число на фактор. При каждом вызове CreateMultiplier создается новое замыкание, которое запоминает значение фактора и использует его при вызове полученной функции multiplierBy2. ",85
В чём разница между ключевыми словами finally и finalize?,"finally используется в блоке try-catch, finalize вызывается при удалении объекта.","finally и finalize это одно и то же, но один используют с классами, а другой с методами и полями.","finally вызывается сборщиком мусора, finalize - блок, который игнорирует появление ошибки и вызывается в любом случае.","finally используется для определения окончания блока кода, finalize принудительно завершает выполнение программы.","finally является блоком кода в C#, который используется в связке с блоками try и catch для выполнения кода, который должен быть выполнен независимо от того, произошло исключение или нет.
finalize является методом в C#, который вызывается сборщиком мусора перед окончательным удалением объекта из памяти.",86
Что такое Normal Mapping в Unity?,Процесс изменения нормалей поверхности для создания иллюзии дополнительной детализации.,Метод оптимизации работы с физическими материалами в сцене.,Механизм для определения столкновений объектов в игровой сцене.,Метод для оптимизации использования ресурсов видеокарты при рендеринге сцены.,"Normal Mapping в Unity - это техника, используемая для добавления дополнительной детализации и реалистичности к поверхностям объектов без изменения их геометрии. Это позволяет создавать визуально более сложные и текстурные объекты, не увеличивая количество полигонов, что положительно сказывается на производительности.

Техника Normal Mapping основана на использовании текстур, называемых Normal Maps, которые содержат информацию о нормалях (направлениях поверхности) для каждого пикселя объекта. Эти нормали используются для определения, как свет взаимодействует с поверхностью, создавая иллюзию выступов и впадин.",86
Cinemachine предлагает инструменты для построения игрового поведения. Какой компонент создает траектории на основе сплайнов для движущихся объектов?,Cinemachine Smooth Path,Cinemachine Target Group, Cinemachine Free Look,Cinemachine Brain,"Компонент Cinemachine Smooth Path используется для создания плавных путей (траекторий) для перемещения объектов в Unity. Это позволяет легко задавать сложные траектории движения для камеры или других игровых объектов с помощью сплайнов, что улучшает анимацию и визуальный опыт в игре.",87
Что такое Reflection в C#?,"Reflection - это механизм, который позволяет анализировать и модифицировать свою структуру и поведение во время выполнения. ","Reflection - это технология, которая позволяет программе отслеживать и регистрировать изменения в базе данных.","Reflection  - это механизм, который автоматически рефакторит код, чтобы улучшить его производительность и читаемость.",Reflection - это процесс создания отражений на поверхности объектов в трехмерном пространстве с учетом нормалей.,"Reflection (отражение) в C# - это механизм, который позволяет программе анализировать, извлекать информацию о типах, а также взаимодействовать с ними во время выполнения программы. С помощью Reflection можно получить доступ к метаданным типов, таким как поля, свойства, методы, конструкторы, атрибуты и другие детали типа.

Reflection позволяет динамически создавать экземпляры типов, вызывать их методы, устанавливать и получать значения свойств, анализировать и изменять структуру типов на основе метаданных во время выполнения программы.",88
"Почему Dictionary работает быстрее, чем List?","Dictionary быстрее, благодаря использованию хэш-таблиц для хранения данных.","Dictionary быстрее, потому что он использует ""магический"" алгоритм поиска, который выполняется мгновенно.","Dictionary быстрее, благодаря современным и эффективным алгоритмам сравнения элементов.","Dictionary быстрее, потому что его элементы автоматически сортируются по ключам, что упрощает поиск.","В Dictionary каждый элемент хранится в виде пары ключ-значение. Он использует хэш-таблицу для эффективного доступа к элементам по ключу. Хэш-таблица позволяет выполнять операции добавления, удаления и поиска элементов за константное время (O(1)), в среднем. 

Доступ к элементам в List осуществляется по индексу. При поиске элемента в List требуется выполнить линейный поиск, просматривая каждый элемент до нахождения нужного индекса. Это занимает время пропорциональное размеру списка, то есть O(n), где n - количество элементов в списке.",88
"Что такое ""графический проход"" (Graphics Pass) в рамках Scriptable Render Pipeline (SRP) в Unity?",Шаг в процессе отрисовки объектов на экране.,Метод для передачи данных между CPU и GPU.,Механизм для объединения различных ассетов в один бандл.,Технология для управления памятью и оптимизации ресурсов.,"Графический проход (Graphics Pass) в рамках Scriptable Render Pipeline (SRP) в Unity представляет собой один из этапов процесса отрисовки объектов на экране. SRP позволяет разработчикам более гибко контролировать процесс рендеринга, разбивая его на отдельные проходы, каждый из которых выполняет определенные операции с графическими данными.
Каждый графический проход выполняет определенные шаги обработки данных, такие как: применение шейдеров, настройка материалов, расчет освещения, запись результатов в буферы кадра и т.д. Каждый проход определяет свой порядок операций и может использоваться для рендеринга определенных типов объектов или применения определенных эффектов.",89
Какой атрибут C# позволяет запускать класс и его методы внутри редактора в режиме редактирования?,[ExecuteAlways],"[Range(0,10)]",[Live],[Editor],"Атрибут [ExecuteAlways] применяется к методам в классах MonoBehaviour в Unity. Он указывает, что метод должен выполняться как в режиме редактора (Editor mode), так и в режиме игры (Play mode). Этот атрибут полезен, когда вы хотите, чтобы определенный метод работал как в редакторе, так и во время игры, что может упростить разработку и тестирование игры.

Основное назначение атрибута [ExecuteAlways] заключается в том, чтобы предоставить доступ к редакторским функциям и методам в процессе разработки игры, чтобы увидеть результаты изменений в сцене в редакторе и игре. ",90
Что такое Scriptable Render Pipeline (SRP) в Unity и для чего он используется?,Это метод работы с рендерингом в Unity для создания кастомных рендеринговых решений.,Это инструмент для управления зависимостями в Unity проектах.,Это специальная система управления асинхронным кодом в Unity.,"Это компонент Unity, позволяющий создавать сложные анимации.","Scriptable Render Pipeline (SRP) - это новый подход к рендерингу в Unity, который позволяет разработчикам создавать кастомные рендеринговые решения. Он предоставляет гибкость и контроль над процессом рендеринга, позволяя оптимизировать производительность и достичь высококачественных визуальных эффектов.

Применение SRP особенно актуально для больших проектов, которые требуют высокой степени оптимизации и масштабируемости. Он также позволяет упростить разработку для разных платформ, так как можно создать отдельные рендеринговые решения для мобильных устройств, десктопов и консолей.",90
В чем разница между Lambda и Expression в C#?,Lambda - компактный синтаксис анонимных функций. Expression - объектная модель для представления логической структуры выражений.,Lambda - для создания функций с фиксированным набором параметров. Expression позволяет работать с переменным числом параметров.,"Lambda используется для функционального программирования, а Expression - для объектно-ориентированного программирования.",Lambda и Expression - это два разных способа создания анонимных функций в C#.,"Lambda - это сокращенная и компактная форма записи анонимных функций в C#. Они позволяют создавать функции ""на лету"" без явного определения имени функции. 
Func<int, int, int> addNumbers = (x, y) => x + y;
Expression - это часть системы типов Expression Tree в C#. Они позволяют представлять логику выражений в виде объектной модели, что делает их доступными для динамической модификации и выполнения во время выполнения программы. 
        ParameterExpression x = Expression.Parameter(typeof(int), ""x"");
        ParameterExpression y = Expression.Parameter(typeof(int), ""y"");
        BinaryExpression sum = Expression.Add(x, y);",91
Что такое Jobs System в Unity?,Это система для управления задачами в фоновом режиме и оптимизации производительности.,Это система для создания и управления работой разработчиков в Unity.,"Это компонент, позволяющий управлять процессом загрузки ресурсов в игре.",Это технология для создания и управления различными заданиями в редакторе Unity.,"Jobs System в Unity представляет собой систему для выполнения параллельных вычислений на многопоточных процессорах. Он позволяет распределять вычислительные задачи между несколькими потоками, чтобы повысить производительность и улучшить производительность приложения.",92
Поле поиска в окне проекта может фильтровать отображение ассетов с помощью текстовых команд. Какая команда отобразит только текстуры?,T:texture, T:mesh, T:mesh, Show textures,"
Для окна поиска в Unity есть несколько команд, которые позволяют фильтровать отображение ассетов:

""t:Type"" - отображает ассеты указанного типа. Например, ""t:Prefab"" отобразит только префабы.
""l:Label"" - отображает ассеты с указанной меткой . 
""b:BuildSettings"" - отображает ассеты, связанные с настройками сборки.
""d:Script"" - отображает скрипты.
""n:Name"" - отображает ассеты, чьи имена содержат указанный текст.
""p:Package"" - отображает ассеты из указанного пакета.
""a:AnimationClip"" - отображает анимационные клипы.
""s:Shader"" - отображает шейдеры.",92
Что такое Shadow mapping в Unity?,Техника для визуализации теней объектов в сцене.,Метод обхода коллизий для объектов в тени.,Алгоритм для оптимизации отрисовки объектов с использованием теней.,Метод для управления светом и его взаимодействия с объектами.,"Shadow mapping (теневая картировка) в Unity - это техника генерации теней в 3D-сценах. Она используется для визуального эффекта проецирования теней от источника света на объекты сцены. Применяется для достижения реалистичности визуализации, так как тени играют важную роль в восприятии объемности и глубины окружающего мира.",93
Что такое Light Probe Proxy Volume (LPPV) в Unity?,"Это компонент Unity, используемый для управления освещением и рассеянным светом в динамических сценах.","Это специальный вид коллайдера, который позволяет объектам взаимодействовать с окружающими световыми зондами.",Это инструмент для создания фотореалистичных отражений на объектах.,"Это функция Unity, позволяющая создавать и управлять анимацией световых источников.","Light Probe Proxy Volume (LPPV) в Unity - это компонент, который используется для улучшения качества освещения в сценах с динамическими объектами и перемещающимися персонажами.

LPPV позволяет уменьшить количество световых зондов, используемых в сцене, при этом сохраняя высокое качество освещения. Он используется для оптимизации производительности и уменьшения нагрузки на графический процессор.

LPPV позволяет создавать гладкие переходы между различными зонами освещения и повышает реалистичность отображаемых сцен. Этот компонент особенно полезен для больших и сложных сцен с разнообразными источниками света.",94
Что такое Post-Processing Stack в Unity?,"Это набор для пост-обработки, используемый для добавления различных эффектов камеры.",Это инструмент для создания пост-обработки аудиоэффектов в игре.,"Это технология для создания и настройки физических эффектов, таких как взрывы и дым.",Это система для создания и управления искусственным освещением в игре.,"Post-Processing Stack в Unity - это пакет инструментов, предназначенный для добавления и настройки пост-обработки графики в игре. Он позволяет применять различные эффекты после прохождения процесса рендеринга, такие как цветокоррекция, размытие, глубина резкости и другие, чтобы улучшить визуальное восприятие игры.",94
Что такое occlusion culling в Unity и как он улучшает производительность?,"Это метод оптимизации отрисовки объектов за сценой, которые не видны из текущей камеры.",Это метод оптимизации анимаций в Unity., Это компонент Unity для работы с искусственным интеллектом.,Это инструмент для создания кастомных шейдеров в Unity.,"Occlusion Culling (окклюзионная сортировка) в Unity - это техника оптимизации рендеринга, которая позволяет исключить из отрисовки объекты, которые находятся за другими объектами и не видны из текущей камеры. 

Результатом применения occlusion culling является снижение количества отрисованных объектов, сокращение затрат по процессору и видеокарте, а также повышение частоты кадров и общей производительности проекта. Особенно это актуально для больших сцен с множеством сложных объектов, например, в 3D-играх или симуляторах.",95
"Unity автоматически прикрепляет компонент SkinnedMeshRenderer к некоторым мешам, когда они добавляются в сцену. Почему это происходит?",Файл меша содержит кости и скелетную анимацию.,Игровой объект имеет компонент аниматора.,"Объект — персонаж, управляемый игроком.",Файл сетки содержит гуманоидного персонажа.,"SkinnedMeshRenderer - это компонент в Unity, который используется для отображения и анимации 3D-моделей, которые имеют скелетную анимацию. Он используется для отображения скиннед (скелетно-анимированных) мешей.

Скиннед меш - это 3D-модель, состоящая из вершин (vertices), которые связаны с костями (bones) с помощью весов (weights). Кости образуют сетку, и каждая вершина может быть привязана к одной или нескольким костям. Веса определяют, насколько каждая вершина будет двигаться вместе с соответствующей костью. Это позволяет создавать реалистичную и гибкую анимацию для персонажей, животных и других скиннед объектов.",96
Что такое IK (Inverse Kinematics) в Unity?,Это техника для создания реалистичной анимации движения объектов в сцене.,"Это компонент, позволяющий создавать и управлять системами частиц в игре.",Это альтернативный метод визуализации игровых объектов с использованием специальных материалов.,Это алгоритм для оптимизации работы с физическими материалами в игре.,"Inverse Kinematics (обратная кинематика) в Unity - это методика моделирования движения объектов таким образом, чтобы заданное положение и ориентация определенной точки (или точек) объекта были достигнуты за счет изменения параметров суставов или сочленений модели. Основная идея обратной кинематики заключается в том, чтобы определить значения углов, необходимые для достижения желаемой позиции и ориентации, исходя из известного положения и ориентации конечных точек объекта.",96
Что такое Addressable Assets System в Unity?,"Это система для организации и управления ресурсами, которая позволяет загружать их динамически в проекте.",Это компонент Unity для работы с базой данных.,Это система для упаковки ресурсов в один файл для упрощения их распространения., Это инструмент для работы с файловой системой и путями в Unity.,"С помощью Addressable Assets System разработчики могут создавать адресуемые ресурсы, которые имеют уникальные идентификаторы (адреса). 
Фишки AAS:
Динамическая загрузка: Ресурсы можно загружать и выгружать по мере необходимости.
Гибкость: Адреса ресурсов можно менять и обновлять без изменения кода.
Автоматическое управление памятью: AAS автоматически управляет выгрузкой ресурсов, которые больше не используются.
Локализация: Ресурсы можно легко локализовать, заменяя адресуемые ассеты на соответствующие локализованные версии.
Управление версиями: AAS предоставляет возможность управлять версиями ресурсов.",97
Что такое Burst Compiler?,Это технология для генерации высокоэффективного нативного кода из методов C# для улучшения производительности.,Это средство для создания визуальных эффектов и шейдеров в Unity.,"Это плагин, который позволяет разработчикам обмениваться своими проектами и ресурсами с другими командами в Unity.",Это инструмент для быстрого создания сложных анимаций и переходов между состояниями объектов в Unity.,"Burst Compiler - это технология в Unity, которая предоставляет возможность генерировать высокоэффективный нативный код для определенных методов C# или C#.NET, особенно для использования с Unity Job System. Он позволяет оптимизировать вычисления и ускорить выполнение кода за счет использования специальных оптимизаций и возможности многопоточности.

Важно отметить, что Burst Compiler не может использоваться для всех методов, а только для тех, которые удовлетворяют определенным ограничениям и условиям. Он обычно используется совместно с Unity Job System и Unity DOTS для достижения высокой производительности в игровых проектах.",98
"Что такое ""deferred rendering"" (отложенная отрисовка) и  ""forward rendering"" (прямая отрисовка) в Unity?",Алгоритмы для вычисления освещения и применения шейдеров,Различные настройки камеры для создания разных эффектов,Методы оптимизации для уменьшения числа отрисовок объектов,Механизмы для обработки коллизий и столкновений объектов,"Forward Rendering (прямая отрисовка):
Для каждого объекта в сцене происходит отдельная проходка всех источников света и материалов, чтобы получить итоговое изображение на экране.
Deferred Rendering (отложенная отрисовка):
Для каждого объекта в сцене происходит отдельная проходка для сбора информации о его свойствах.
Затем происходит отдельный проход для вычисления освещения на основе собранных данных, что позволяет уменьшить количество проходов по сравнению с forward rendering.
Deferred rendering хорошо работает с большим количеством источников света и объектов, что предпочтительно в крупных и сложных сценах.
В то время как forward rendering прост и эффективен для маленьких сцен и устройств с ограниченными возможностями. ",98
